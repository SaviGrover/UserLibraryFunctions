Gmail	Savi Grover <savi.grover.sg92@gmail.com>
Code - SAM
Savi Grover <savi.grover@intsof.com>	30 June 2017 at 06:20
To: "savi.grover.sg92@gmail.com" <savi.grover.sg92@gmail.com>
Element_Load();

              Select_NestedTerm(getXMLList("TermNestedTerm"));

              Element_Load();

             

              //Select DDCS

              DDCS(getXMLList("DDCSDetails"));  

              Element_Load();

             

              //Select Person Type

              Person_Type(getXMLList("PersonType"));

              Element_Load();

             

              //Select Section Status

              Student_Section_Status_Type(getXMLList("StudentSectionStatus"));

              Element_Load();

              click(CommunicationPage.Button_Search, getResourceDatafromXml("Btn_Saerch"));

              WaitforBrowser_Load();

 

 

Userlibrary:

 

/***********************************Header Start*********************************************************************************

* Application/ Module Name                                        : AMTdirect

* Test/ Function Name                                  : All Application Reusable Methods

* Owner                                                : Test Automation Team

***********************************************************************

* Creation /Modification Log:

 * Date                     By                                Notes                                   

 ---------                ----------                      ---------

* 19/01/2016                                     Test Automation Team                                                

***********************************************************************

* Review/Feedback Log:

 * Date                     By                                Notes                                   

 ---------                 --------                                   ----------

* [Date]                   [Reviewer]                 [Brief description of the review/feedback comments]

* 

 ***********************************************************************

* Functional Test Coverage Description                                                   : Defined functional reusable methods                                                                                                                                                                                                                                  

 

***********************************************************************

* Notes                                                : NA

* Assumptions                                          : NA

* Limitations                                          : NA

*

=============List of Resources used===================

* User Defined Functions                               : User Library

* Recovery Scenarios                                       : NA

* Data Tables                                         : TestData.xml

=============List of  Used Prerequisite Data===================

 

***********************************Header End*********************************************************************************/

package com.SAM.CustomLibrary;

 

import java.util.List;

import java.util.Locale;

import java.util.NoSuchElementException;

import java.util.Properties;

import java.util.Random;

import java.util.TimeZone;

import java.util.concurrent.TimeUnit;

import java.awt.AWTException;

import java.awt.Robot;

import java.awt.Toolkit;

import java.awt.datatransfer.Clipboard;

import java.awt.datatransfer.StringSelection;

import java.util.ArrayList;

import java.util.Arrays;

import java.util.Calendar;

import java.util.Collections;

import java.util.Date;

import java.util.Iterator;

 

import org.apache.commons.io.FilenameUtils;

import org.apache.poi.hssf.usermodel.HSSFCell;

import org.apache.poi.hssf.usermodel.HSSFRow;

import org.apache.poi.hssf.usermodel.HSSFSheet;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import org.apache.poi.poifs.filesystem.POIFSFileSystem;

import org.apache.poi.ss.usermodel.Cell;

import org.apache.poi.ss.usermodel.Row;

import org.apache.poi.ss.usermodel.Sheet;

import org.apache.poi.ss.usermodel.Workbook;

import org.openqa.selenium.Alert;

import org.openqa.selenium.By;

import org.openqa.selenium.JavascriptExecutor;

import org.openqa.selenium.Keys;

import org.openqa.selenium.UnhandledAlertException;

import org.openqa.selenium.WebElement;

 

import org.openqa.selenium.interactions.Actions;

 

import org.openqa.selenium.support.PageFactory;

import org.openqa.selenium.support.ui.ExpectedConditions;

import org.openqa.selenium.support.ui.WebDriverWait;

 

import com.SAM.Pages.CommunicationPage;

import com.SAM.Pages.EmalHistory;

import com.SAM.Pages.HomePage;

import com.SAM.Pages.IncluEDAccountTrueUpPage;

import com.SAM.Pages.OrderSearchPage;

import com.SAM.Pages.PricingModelPage;

import com.SAM.Pages.TermPage;

import com.opencsv.CSVReader;

import com.relevantcodes.extentreports.LogStatus;

 

import BusinessRules.BusinessFunctions;

 

import java.awt.event.KeyEvent;

import java.io.BufferedReader;

import java.io.File;

import java.io.FileInputStream;

import java.io.FileNotFoundException;

import java.io.FileOutputStream;

import java.io.FileReader;

import java.io.FileWriter;

import java.io.IOException;

import java.io.PrintStream;

import java.io.PrintWriter;

import java.nio.file.Files;

import java.nio.file.Path;

import java.nio.file.Paths;

import java.text.DateFormat;

import java.text.DecimalFormat;

import java.text.ParseException;

import java.text.SimpleDateFormat;

 

public class UserLibrary extends BusinessFunctions {

                public static Robot robot = null;

                public static String FilePath = "C://Users//sgrover//Desktop//New folder";

                public static String folderName = "SAM_StudentRegistration";

                public static String folderName1 = "DPFPasscodeFile";

                public static String fileName = "";

                public static int count = 0;

                public static String email = "@gmail.com";

                public static int PendingErrorsTotalCount = 0;

                public static String fname = "SAMStudentRegistration-9947-AutoTest";

                public static String fname1 = "PasscodeFile";

                public static int finalcount = 0;

                final static DateFormat df = new SimpleDateFormat("MM/dd/yyyy");

                public Calendar cal = Calendar.getInstance();

                public String FileNamestr = null;

                public CSVReader reader;

                private Object elseif;

                public static String StudID = null;

                private static String GridMachine = System.getProperty("enableGrid", "true");

                public static int StudentIDCount = 0;

                public static long StuIDlastSeqNum = 0;

                public String colName = "";

                public String stt = "";

 

                public static long diffDays;

 

                /***********************************

                *

                 * @purpose: Element Load

                * @author :

                * @return : void

                *

                 ***********************************/

 

                public void Element_Load() {

 

                                try {

                                                Thread.sleep(5000);

                                } catch (InterruptedException e) {

 

                                                e.printStackTrace();

                                }

 

                }

 

                /***********************************

                *

                 * @purpose: DropDown Click

                * @author : Sivanandareddy GPSR

                * @return : Void

                *

                 ***********************************/

 

                public void DropDown_Click(WebElement Dropdown, WebElement DropdownValue) {

 

                                Load();

                                Dropdown.click();

                                Load();

                                ((JavascriptExecutor) getDriver()).executeScript("arguments[0].click();", DropdownValue);

 

                }

 

                /***********************************

                *

                 * @purpose: Verify_Error_Message

                * @author : Shraddha Mishra

                * @return : Void

                ***********************************/

                public void Verify_Error_Message() {

 

                                try {

                                                methodMessage("Reusable Method :Verify_Error_Message - Start");

                                                TermPage TermPage = PageFactory.initElements(getDriver(), TermPage.class);

                                                String ErrMessage = TermPage.Error_Message.getText();

                                                String Message = getdatafromXml("Message");

                                                System.out.println(ErrMessage);

                                                if (ErrMessage.contains(Message)) {

                                                                logReport(true, "Passed:" + ErrMessage, true);

                                                } else {

                                                                logReport(false, "Failed:" + ErrMessage, true);

                                                }

 

                                } catch (Exception e) {

                                                e.printStackTrace();

                                                logReport(false, "Expected error not found ", true);

 

                                }

                                methodMessage("Reusable Method :Verify_Error_Message- End");

 

                }

 

                /***********************************

                *

                 * @purpose: Is Sheet Exists on System

                * @author : Sivanandareddy

                * @return : Boolean

                *

                 ***********************************/

 

                // checks whether the sheet is present or not.

                public void isSheetExists() {

 

                                String filepath = "C:\\Users\\" + System.getProperty("user.name") + "\\Downloads\\9947_Term_View.xls";

 

                                methodMessage("Verify that file is Downloaded and exists in the specified folder");

                                Path path = Paths.get(filepath);

 

                                if (Files.exists(path)) {

                                                // file exist

 

                                                System.out.println("File successfully downloaded and exists on system");

                                }

 

                                if (Files.notExists(path)) {

                                                // file is not exist

                                                System.out.println("File successfully not downloaded and not exists on system");

                                }

                                methodMessage("Verified the file is Downloaded Successfuilly and Exists at location: " + filepath);

                }

 

                /***********************************

                *

                 * @purpose: Nested Term Selection

                * @author : Sivanandareddy

                * @return : Void

                *

                 ***********************************/

                public void Select_NestedTerm(ArrayList<String> NestedTerms) {

 

                                try {

                                                CommunicationPage CommunicationPage = PageFactory.initElements(getDriver(), CommunicationPage.class);

                                                WaitforBrowser_Load();

                                                click(CommunicationPage.Dropdown_NestedTerm, getResourceDatafromXml("Dropdown_NestedTerm"));

                                                List<WebElement> Checkbox = getDriver().findElements(By.xpath("//div[5]/div/div/div[2]/table/tbody/tr"));

                                                System.out.println(Checkbox.size());

                                                WaitforBrowser_Load();

                                                for (String Select_NestedTerm : NestedTerms) {

                                                                for (int i = 1; i <= Checkbox.size(); i++) {

                                                                                WebElement Nestedtermnamelist = getDriver()

                                                                                                                .findElement(By.xpath("//div[5]/div/div/div[2]/table/tbody/tr[" + i + "]/td[2]"));

                                                                                System.err.println("Nestedtermnamelist :" + Nestedtermnamelist.getText());

                                                                                WaitforBrowser_Load();

                                                                                if (Nestedtermnamelist.getText().equals(Select_NestedTerm)) {

                                                                                                getDriver().findElement(By.xpath("//div[5]/div/div/div[2]/table/tbody/tr[" + i + "]/td/input"))

                                                                                                                                .click();

                                                                                }

                                                                }

                                                }

                                                click(CommunicationPage.Dropdown_NestedTerm1, getResourceDatafromXml("Dropdown_NestedTerm"));

                                } catch (Exception e) {

 

                                }

 

                }

 

                /***********************************

                *

                 * @purpose: Nested Term Selection

                * @author : Sivanandareddy

                * @return : Void

                *

                 ***********************************/

                public void DDCS(ArrayList<String> DDCS) {

 

                                try {

                                                CommunicationPage CommunicationPage = PageFactory.initElements(getDriver(), CommunicationPage.class);

                                                WaitforBrowser_Load();

                                                click(CommunicationPage.Dropdown_DDCS, getResourceDatafromXml("Dropdown_DDCS"));

                                                WaitforBrowser_Load();

                                                List<WebElement> Checkbox = getDriver()

                                                                                .findElements(By.xpath("(//div[@class='k-grid-content'])[2]//tr/td[1]/input"));

                                                System.out.println(Checkbox.size());

                                                WaitforBrowser_Load();

                                                for (String DDCSVlaues : DDCS) {

                                                                for (int i = 1; i <= Checkbox.size(); i++) {

                                                                                WebElement Nestedtermnamelist = getDriver()

                                                                                                                .findElement(By.xpath("((//div[@class='k-grid-content'])[2]//tr/td[2])[" + i + "]"));

                                                                                System.err.println("Nestedtermnamelist :" + Nestedtermnamelist.getText());

                                                                                WaitforBrowser_Load();

                                                                                if (Nestedtermnamelist.getText().equals(DDCSVlaues)) {

                                                                                                getDriver()

                                                                                                                                .findElement(

                                                                                                                                                                By.xpath("((//div[@class='k-grid-content'])[2]//tr/td[1]/input)[" + i + "]"))

                                                                                                                                .click();

 

                                                                                }

                                                                }

                                                }

                                                click(CommunicationPage.Dropdown_DDCS1, getResourceDatafromXml("Dropdown_DDCS"));

                                } catch (Exception e) {

 

                                }

 

                }

 

                /***********************************

                *

                 * @purpose: Status Email History Selection

                * @author : Sivanandareddy

                * @return : Void

                *

                 ***********************************/

                public void StatusEmailHistory(ArrayList<String> Status) {

 

                                try {

                                                EmalHistory EmalHistory = PageFactory.initElements(getDriver(), EmalHistory.class);

                                                CommunicationPage CommunicationPage = PageFactory.initElements(getDriver(), CommunicationPage.class);

                                                WaitforBrowser_Load();

                                                click(EmalHistory.Dropdown_Status, getResourceDatafromXml("Status"));

                                                WaitforBrowser_Load();

                                                List<WebElement> Checkbox = getDriver()

                                                                                .findElements(By.xpath("(//div[@class='k-grid-content'])//tr/td[1]/input"));

                                                System.out.println(Checkbox.size());

                                                WaitforBrowser_Load();

                                                for (String StatusValues : Status) {

                                                                System.out.println("xml data :- " + StatusValues);

                                                                for (int i = 1; i <= Checkbox.size(); i++) {

                                                                                WebElement Status1 = getDriver().findElement(By.xpath("//div[2]/table/tbody/tr[" + i + "]/td[2]"));

                                                                                System.err.println("Status :" + Status1.getText());

                                                                                WaitforBrowser_Load();

                                                                                if (Status1.getText().equals(StatusValues)) {

                                                                                                getDriver()

                                                                                                                                .findElement(By.xpath("((//div[@class='k-grid-content'])//tr/td[1]/input)[" + i + "]"))

                                                                                                                                .click();

 

                                                                                }

                                                                }

                                                }

                                                click(EmalHistory.Dropdown_Status, getResourceDatafromXml("Status"));

                                } catch (Exception e) {

 

                                }

 

                }

 

                /***********************************

                *

                 * @purpose: Create a folder (if not exists) under Downloads directory

                * @author : Rahul Sharma

                * @return : Void

                *

                 ***********************************/

 

                public static void CreateFolder(String folderName) {

                                String filepath = "C:\\Users\\" + System.getProperty("user.name") + "\\Downloads";

                                try {

                                                /* Create Single folder under Downloads directory */

                                                File file = new File(filepath + "\\" + folderName);

                                                if (!file.exists()) {

                                                                if (file.mkdir()) {

                                                                                System.out.println("Directory is created!");

                                                                } else {

                                                                                System.out.println("Failed to create directory!");

                                                                }

                                                }

 

                                } catch (Exception ex) {

                                                ex.printStackTrace();

                                }

                }

 

                /***********************************

                *

                 * @purpose:View recently set Up Term

                * @author : Sivanandareddy

                * @return : Boolean

                *

                 ***********************************/

                public void Verify_New_SetUp_Term(String Term1) {

 

                                List<WebElement> TermView = getDriver().findElements(By.xpath("//*[@id='MainContent_gvTerm']/tbody/tr"));

                                int size = TermView.size();

                                System.out.println(size);

                                Element_Load();

                                for (int n = 0; n < size - 1; n++) {

                                                Load();

                                                int curr_row = n + 2;

                                                WebElement Tname = getDriver()

                                                                                .findElement(By.xpath("//*[@id='MainContent_gvTerm']/tbody/tr[" + curr_row + " ]/td[1]"));

 

                                                String Term = getDriver()

                                                                                .findElement(By.xpath("//*[@id='MainContent_gvTerm']/tbody/tr[" + curr_row + " ]/td[1]")).getText();

                                                System.out.println(Term);

                                                // String New_Term=getdatafromXml("New_Term");

                                                if (Term.contains(Term1)) {

                                                                highlightObject(Tname);

                                                                testStepMessage(getResourceDatafromXml("New_Term") + getResourceDatafromXml("displayed"));

                                                                logReport(true, getResourceDatafromXml("Pass") + getResourceDatafromXml("New_Term")

                                                                                                + getResourceDatafromXml("displayed"), true);

                                                                break;

                                                } else {

                                                                testStepMessage(getResourceDatafromXml("New_Term") + getResourceDatafromXml("not_displayed"));

                                                                logReport(true, getResourceDatafromXml("Fail") + getResourceDatafromXml("New_Term")

                                                                                                + getResourceDatafromXml("not_displayed"), true);

                                                }

                                }

                }

 

                /***********************************

                *

                 * @purpose: Is Sheet Exists on System

                * @author : Sivanandareddy

                * @return : Boolean

                *

                 ***********************************/

 

                // checks whether the sheet is present or not.

                public void Verify_ReconcilationReport() {

 

                                String filepath = "C:\\Users\\" + System.getProperty("user.name") + "\\Downloads\\9947_SAM_Reconciliation.csv";

 

                                methodMessage("Verify that file is Downloaded and exists in the specified folder");

                                Path path = Paths.get(filepath);

 

                                if (Files.exists(path)) {

                                                // file exist

 

                                                methodMessage("File successfully downloaded and exists on system");

                                                logReport(true, "Passed:File successfully downloaded and exists on system", true);

                                }

 

                                if (Files.notExists(path)) {

                                                // file is not exist

                                                methodMessage("File doesn't exist on system.");

                                                // logReport(false,"Passed:File doesn't exist on system.", true);

                                }

                                methodMessage("Verified the file is Downloaded Successfuilly and exists at location: " + filepath);

                }

 

                /***********************************

                *

                 * @purpose: File Upload

                * @author : GPSR Sivananda Reddy

                * @return : Void

                *

                 ***********************************/

 

                public void Student_Registration_Fle_Upload() {

 

                                try {

                                                methodMessage("Reusable Method : Student_Registration_Fle_Upload                             - Start");

 

                                                WebElement Support = getDriver()

                                                                                .findElement(By.xpath("//div[@id='NavigationMenu']/ul/li[10]/a[contains(text(),'Support')]"));

                                                click(Support, getResourceDatafromXml("Link_Support"));

                                                Element_Load();

                                                WebElement upload = getDriver().findElement(By.xpath("//a[contains(text(),'Upload To FTP')]"));

                                                highlightObject(upload);

                                                click(upload, getResourceDatafromXml("Upload_SRF"));

                                                Thread.sleep(10000);

 

                                                WebElement uploadFile = getDriver().findElement(By.name("ctl00$MainContent$FileUploadControl"));

                                                // System.out.println("Test to click on browse button to upload

                                                // file");

                                                highlightObject(uploadFile);

                                                Thread.sleep(10000);

                                                uploadFile.sendKeys(FilePath);

                                                Thread.sleep(3000);

                                                WebElement submit = getDriver().findElement(By.cssSelector("input[type='submit']"));

                                                highlightObject(submit);

                                                logReport(true, getResourceDatafromXml("Pass") + getResourceDatafromXml("Upload_SRF"), true);

                                                submit.click();

 

                                                // click(submit, "submit button");

                                                // testStepMessage("FileUploaded Successfully");

 

                                } catch (Exception e) {

                                                e.printStackTrace();

                                                logReport(false, getResourceDatafromXml("Fail") + getResourceDatafromXml("Unable")

                                                                                + getResourceDatafromXml("Upload_SRF"), false);

 

                                }

                                methodMessage("Reusable Method : Student_Registration_Fle_Upload                             - End");

 

                }

 

                /***********************************

                *

                 * @purpose:Convert excel to text

                * @author : Asish Mehta

                * @return : Void

                *

                 ***********************************/

 

                public static void convertExcelToText() {

 

                                Random randomGenerator = new Random();

                                try {

                                                List<List<HSSFCell>> cellGrid;

                                                cellGrid = new ArrayList<List<HSSFCell>>();

                                                FileInputStream myInput = new FileInputStream(

                                                                                System.getProperty("user.dir") + "\\Resource\\TestData\\Student.xls");

                                                POIFSFileSystem myFileSystem = new POIFSFileSystem(myInput);

                                                HSSFWorkbook myWorkBook = new HSSFWorkbook(myFileSystem);

                                                HSSFSheet mySheet = myWorkBook.getSheetAt(0);

                                                Iterator<?> rowIter = mySheet.rowIterator();

                                                HSSFCell cell;

                                                while (rowIter.hasNext()) {

                                                                HSSFRow myRow = (HSSFRow) rowIter.next();

                                                                Iterator<?> cellIter = myRow.cellIterator();

                                                                List<HSSFCell> cellRowList = new ArrayList<HSSFCell>();

                                                                for (int i = 0; i < myRow.getLastCellNum(); i++) {

                                                                                cell = myRow.getCell(i, Row.CREATE_NULL_AS_BLANK);

                                                                                // System.out.print(cell.toString()+"\t");

                                                                                cellRowList.add(cell);

                                                                }

                                                                // cellRowList.add(myCell);

                                                                System.out.println(cellRowList);

                                                                cellGrid.add(cellRowList);

                                                }

                                                System.out.println(cellGrid);

                                                CreateFolder(folderName);

                                                String filePath = "C:\\Users\\" + System.getProperty("user.name") + "\\Downloads\\" + folderName + "\\";

                                                String fileName = fname + randomGenerator.nextInt(10000) + ".txt";

                                                FilePath = filePath + fileName;

                                                System.out.println(FilePath);

                                                File file = new File(filePath + fileName);

                                                PrintStream stream = new PrintStream(file);

                                                for (int i = 0; i < cellGrid.size(); i++) {

                                                                List<HSSFCell> cellRowList = cellGrid.get(i);

                                                                // System.out.println(cellRowList.size());

                                                                for (int j = 0; j < cellRowList.size(); j++) {

                                                                                HSSFCell myCell = (HSSFCell) cellRowList.get(j);

                                                                                String stringCellValue = myCell.toString();

                                                                                if (j == cellRowList.size() - 1) {

                                                                                                stream.print(stringCellValue.trim());

                                                                                } else {

                                                                                                stream.print(stringCellValue + "\t");

                                                                                }

                                                                }

                                                                stream.println("");

                                                }

                                }

 

                                catch (Exception e) {

                                                e.printStackTrace();

                                }

 

                }

 

                /***********************************

                *

                 * @purpose: Nested Term Selection

                * @author : Sivanandareddy

                * @return : Void

                *

                 ***********************************/

                public void Person_Type(ArrayList<String> Person_Type) {

 

                                try {

                                                CommunicationPage CommunicationPage = PageFactory.initElements(getDriver(), CommunicationPage.class);

                                                WaitforBrowser_Load();

                                                click(CommunicationPage.Dropdown_PersonType, getResourceDatafromXml("Dropdown_PersonType"));

                                                List<WebElement> Checkbox = getDriver()

                                                                                .findElements(By.xpath("(//div[@class='k-grid-content'])[3]//tr/td[1]/input"));

                                                System.out.println(Checkbox.size());

                                                WaitforBrowser_Load();

                                                for (String Person_TypeValues : Person_Type) {

                                                                for (int i = 1; i <= Checkbox.size(); i++) {

                                                                                WebElement Nestedtermnamelist = getDriver()

                                                                                                                .findElement(By.xpath("((//div[@class='k-grid-content'])[3]//tr/td[2])[" + i + "]"));

                                                                                System.err.println("Nestedtermnamelist :" + Nestedtermnamelist.getText());

                                                                                WaitforBrowser_Load();

                                                                                if (Nestedtermnamelist.getText().equals(Person_TypeValues)) {

                                                                                                getDriver()

                                                                                                                                .findElement(

                                                                                                                                                                By.xpath("((//div[@class='k-grid-content'])[3]//tr/td[1]/input)[" + i + "]"))

                                                                                                                                .click();

                                                                                }

                                                                }

                                                }

                                                click(CommunicationPage.Dropdown_PersonType1, getResourceDatafromXml("Dropdown_PersonType"));

                                } catch (Exception e) {

 

                                }

 

                }

 

                /***********************************

                *

                 * @purpose: Nested Term Selection

                * @author : Sivanandareddy

                * @return : Void

                *

                 ***********************************/

                public void Student_Section_Status_Type(ArrayList<String> Student_Section_Status_Type) {

 

                                try {

                                                CommunicationPage CommunicationPage = PageFactory.initElements(getDriver(), CommunicationPage.class);

                                                WaitforBrowser_Load();

                                                click(CommunicationPage.Dropdown_Status, getResourceDatafromXml("Dropdown_Student_Sction_Status"));

                                                List<WebElement> Checkbox = getDriver()

                                                                                .findElements(By.xpath("(//div[@class='k-grid-content'])[4]//tr/td[1]/input"));

                                                System.out.println(Checkbox.size());

                                                WaitforBrowser_Load();

                                                for (String Student_Section_Status_TypeValues : Student_Section_Status_Type) {

                                                                for (int i = 1; i <= Checkbox.size(); i++) {

                                                                                WebElement Nestedtermnamelist = getDriver()

                                                                                                                .findElement(By.xpath("((//div[@class='k-grid-content'])[4]//tr/td[2])[" + i + "]"));

                                                                                System.err.println("Nestedtermnamelist :" + Nestedtermnamelist.getText());

 

                                                                                if (Nestedtermnamelist.getText().equals(Student_Section_Status_TypeValues)) {

                                                                                                getDriver()

                                                                                                                                .findElement(

                                                                                                                                                                By.xpath("((//div[@class='k-grid-content'])[4]//tr/td[1]/input)[" + i + "]"))

                                                                                                                                .click();

                                                                                }

                                                                }

                                                }

                                                click(CommunicationPage.Dropdown_Stas1, getResourceDatafromXml("Dropdown_Student_Sction_Status"));

                                } catch (Exception e) {

 

                                }

 

                }

 

                /***********************************

                *

                 * @purpose: Load

                * @author : Sivananda Reddy

                * @return : void

                *

                 ***********************************/

 

                public void Load() {

 

                                System.out.println(getResourceDatafromXml("Method_Start") + getResourceDatafromXml("Element_Load"));

                                try {

                                                Thread.sleep(3000);

                                } catch (InterruptedException e) {

 

                                                e.printStackTrace();

                                }

 

                                System.out.println(getResourceDatafromXml("Method_End") + getResourceDatafromXml("Element_Load"));

                }

 

                /*************

                * @purpose Build Version

                * @param SAM

                * @return void

                * @author GPSR Sivanandareddy

                *

                 **********/

 

                public void Build_Version() {

 

                                Load();

                                HomePage HomePage = PageFactory.initElements(getDriver(), HomePage.class);

                                HomePage.Build_Version.sendKeys(Keys.DOWN);

                                String Build_Version = HomePage.Build_Version.getText();

                                System.out.println("Current SAM build version : " + Build_Version);

                                highlightObject(HomePage.Build_Version);

                                logReport(true, "Current SAM build version : " + Build_Version, true);

                                HomePage.Build_Version.sendKeys(Keys.UP);

 

                }

 

                /*************

                * @purpose Launch VPN and SAM

                * @param SAM

                * @return void

                * @author GPSR Sivanandareddy

                *

                 **********/

                public void Launch_Browser() {

 

                                try {

 

                                                openBrowser();

                                                String Title = getDriver().getTitle();

                                                if (Title.trim().contains("Home Page")) {

                                                                // Windows_Authentication_New();

                                                                Load();

 

                                                } else {

                                                                setCurrentURL(getdatafromXml("VPNURL"));

                                                                Windows_Authentication_VPN();

                                                                Load();

                                                                Windows_Authentication_New();

                                                                Load();

                                                }

 

                                } catch (Exception e) {

                                                // TODO: handle exception

                                }

 

                }

 

                /***********************************

                *

                 * @purpose: Windows Authentication (Login to VPN)

                * @author :SantoshKumar

                * @return : Void

                *

                 ***********************************/

 

                public void Windows_Authentication_VPN() {

 

                                try {

                                                methodMessage("Reusable Method : Windows_Authentication_VPN                  - Start");

                                                WebElement user = getDriver().findElement(By.xpath("//input[@id='username']"));

 

                                                clearAndSendKey(user, getdatafromXml("UsernameVPN1"));

 

                                                WebElement PSWD = getDriver().findElement(By.cssSelector("#password_input"));

 

                                                clearAndSendKey(PSWD, getdatafromXml("PasswordVPN1"));

 

                                                WebElement login = getDriver().findElement(By.xpath("//input[@name='Login']"));

 

                                                click(login, "Login Button");

                                                Load();

 

                                                methodMessage("VPN Login Successfully");

 

                                                WebElement web_access_arrow = getDriver().findElement(By.xpath("//img[@id='tab_web-access_arrow']"));

 

                                                click(web_access_arrow, "web_access_arrow");

 

                                                Load();

 

                                                // getDriver().navigate().to("http://sgpsr:gattupalli27@qasam.fheg.follett.com");

                                                getDriver().navigate().to(getdatafromXml("QA_SAM_Url"));

                                                Load();

 

                                                /* Windows_Authentication_New(); */

 

                                } catch (Exception e) {

                                                e.printStackTrace();

                                                logReport(false, "Unable to Windows_Authentication   ", false);

 

                                }

 

                                methodMessage("Reusable Method : Windows_Authentication                              - End");

                }

 

                /*************

                * @purpose Delete all files in a Downloads directory

                * @param

                * @return void

                * @author Karthik Kumar

                *

                 **********/

                public void deleteDownloadedFiles() {

                                methodMessage("Reusable Method : DeleteAllFiles                      - Start");

                                File file = new File("C:\\Users\\" + System.getProperty("user.name") + "\\Downloads");

                                String[] myFiles;

                                if (file.isDirectory()) {

                                                myFiles = file.list();

                                                for (int i = 0; i < myFiles.length; i++) {

                                                                File myFile = new File(file, myFiles[i]);

                                                                myFile.delete();

                                                }

                                }

                                methodMessage("Reusable Method : DeleteAllFiles                      - End");

                }

 

                /********************

                * Credentials with Rahul Sharma

                *

                 *

                 */

 

                public void Windows_Authentication_New() {

 

                                try {

                                                // String pwd="_25";

                                                methodMessage("Reusable Method : Windows_Authentication                              - Start");

                                                // Actions test=new Actions(getDriver());

                                                // test.sendKeys("Sivanandareddy").build().perform();

 

                                                Type("na");

                                                robot.keyPress(KeyEvent.VK_BACK_SLASH);

                                                robot.keyRelease(KeyEvent.VK_BACK_SLASH);

                                                Type("rahsharma");

                                                robot.keyPress(KeyEvent.VK_TAB);

                                                robot.keyRelease(KeyEvent.VK_TAB);

                                                robot.keyPress(KeyEvent.VK_SHIFT);

                                                robot.keyPress(KeyEvent.VK_P);

                                                robot.keyRelease(KeyEvent.VK_P);

                                                robot.keyRelease(KeyEvent.VK_SHIFT);

                                                Type("erformance");

                                                robot.keyPress(KeyEvent.VK_SHIFT);

                                                robot.keyPress(KeyEvent.VK_2);

                                                robot.keyRelease(KeyEvent.VK_2);

                                                robot.keyRelease(KeyEvent.VK_SHIFT);

                                                Type("123");

                                                robot.keyPress(KeyEvent.VK_ENTER);

                                                robot.keyRelease(KeyEvent.VK_ENTER);

                                                methodMessage("Windows Authentication Login Successfully");

 

                                } catch (Exception e) {

 

                                                e.printStackTrace();

                                }

 

                                methodMessage("Reusable Method : Windows_Authentication                              - End");

                }

 

                /*************

                * @purpose Send The Data

                * @return void

                * @author

                *

                 **********/

 

                public void Type(String s) {

 

                                try {

                                                System.out.println("Reusable Method : Type                     - Start");

                                                robot = new Robot();

                                                robot.setAutoDelay(40);

                                                robot.setAutoWaitForIdle(true);

 

                                                byte[] bytes = s.getBytes();

                                                for (byte b : bytes) {

                                                                int code = b;

                                                                // keycode only handles [A-Z] (which is ASCII decimal [65-90])

                                                                if (code > 96 && code < 123)

                                                                                code = code - 32;

                                                                robot.delay(40);

                                                                robot.keyPress(code);

                                                                robot.keyRelease(code);

                                                }

                                } catch (Exception e) {

 

                                }

                                System.out.println("Reusable Method : Type                     - End");

                }

 

                /***********************************

                *

                 * @purpose: Sort Number of Days

                * @author : Shraddha Mishra

                * @return

                * @return : Void

                *

                 ***********************************/

                // Sort Number of days since last file processed

                public void Sort_Number_Of_Days() {

                                methodMessage("Method: Sort Number of days since last file processed - Start ");

                                try {

                                                List<WebElement> Count = getDriver()

                                                                                .findElements(By.xpath("//table[@id='MainContent_gvDaysSinceLastFileProcessed']/tbody/tr/td[5]"));

                                                for (int i = 0; i < Count.size() - 1; i++) {

                                                                boolean sorted = true;

                                                                String Text = Count.get(i).getText();

                                                                int x = Integer.parseInt(Text);

                                                                String Text1 = Count.get(i + 1).getText();

                                                                int x1 = Integer.parseInt(Text1);

                                                                System.out.println(x);

                                                                if (x >= x1) {

                                                                                sorted = true;

                                                                                System.out.println(

                                                                                                                getResourceDatafromXml("File_Processed_Column") + getResourceDatafromXml("Sorted"));

                                                                                logReport(true, getResourceDatafromXml("Pass") + getResourceDatafromXml("File_Processed_Column")

                                                                                                                + getResourceDatafromXml("Sorted"), true);

                                                                } else {

                                                                                sorted = false;

                                                                                System.out.println(

                                                                                                                getResourceDatafromXml("File_Processed_Column") + getResourceDatafromXml("Not_Sorted"));

                                                                                logReport(false, getResourceDatafromXml("Fail") + getResourceDatafromXml("File_Processed_Column")

                                                                                                                + getResourceDatafromXml("Not_Sorted"), true);

                                                                }

                                                }

 

                                } catch (NoSuchElementException ignored) {

 

                                }

                                methodMessage("Method : Sort Number of days since last file processed - End");

                }

 

                /*************

                * @purpose Verify the Days Since Last File Processed Page

                * @param len

                * @return string

                * @author Shraddha_Mishra

                *

                 ******************/

 

                // Verify Days Since Last File Processed Page

                public void Verify_Number_Of_Days(String Term) {

 

                                try {

 

                                                testStepMessage(getStepsfromXml("D") + getStepsfromXml("Verify_Header"));

                                                Element_Load();

                                                HomePage homePage = PageFactory.initElements(getDriver(), HomePage.class);

                                                verifyElementPresentOnPage(homePage.Header_StoreNumber, getResourceDatafromXml("Header_StoreNumber"));

                                                verifyElementPresentOnPage(homePage.Header_Store_Name, getResourceDatafromXml("Header_StoreName"));

                                                verifyElementPresentOnPage(homePage.Header_Term_Name, getResourceDatafromXml("Header_Term_Name"));

                                                verifyElementPresentOnPage(homePage.Header_ORD, getResourceDatafromXml("Header_ORD"));

                                                verifyElementPresentOnPage(homePage.Header_Days_LstFileProcssed,

                                                                                getResourceDatafromXml("Header_Days_LstFileProcssed"));

 

                                                Element_Load();

 

                                                // Verify the “Number Of Days Before File Processed” column displays

                                                // as is 0 on the same day of the SRF upload

                                                testStepMessage(getStepsfromXml("E") + getStepsfromXml("Verify_Days"));

 

                                                // Need to provide the Term Name

                                                Term_Name(Term);

                                                Element_Load();

                                } catch (Exception e) {

                                                // TODO: handle exception

                                }

                }

 

                /***********************************

                *

                 * @purpose: Term Name Verification

                * @author : Sivanandareddy GPSR

                * @return : Void

                * @throws ParseException

                *             Data : Change the Term Name in this method

                *             getDriver().findElement(By.xpath("//td[contains(text(),'Reg

                *             1.21.1')]

                *

                 ***********************************/

 

                public void Term_Name(String Term_Name) {

 

                                try {

                                                methodMessage("Reusable Method : Term_Name        - Start");

 

                                                String Number_of_Days_before_File_Processed = getDriver()

                                                                                .findElement(By.xpath("//td[contains(text(),'" + Term_Name + "')]")).getText();

                                                System.out.println(Number_of_Days_before_File_Processed);

                                                Element_Load();

                                                testStepMessage(getResourceDatafromXml("Number_of_Days_before_File_Processed")

                                                                                + Number_of_Days_before_File_Processed);

                                                String Number_of_Days = getDriver()

                                                                                .findElement(By.xpath("//td[contains(text(),'Reg 1.21.1')]/following-sibling::td[2]")).getText();

                                                // span[contains(text(),

                                                // 'ABZ')]/../following-sibling::section/span[@name='edit']

                                                String Days = getdatafromXml("Count");

 

                                                if (Number_of_Days.contains(Days)) {

 

                                                                testStepMessage(getResourceDatafromXml("Number_of_Days_before_File_Processed")

                                                                                                + getResourceDatafromXml("Displays_Zero"));

                                                                logReport(true,

                                                                                                getResourceDatafromXml("Pass") + getResourceDatafromXml("Number_of_Days_before_File_Processed")

                                                                                                                                + getResourceDatafromXml("Displays_Zero"),

                                                                                                true);

                                                }

 

                                                else {

                                                                testStepMessage(getResourceDatafromXml("Number_of_Days_before_File_Processed")

                                                                                                + getResourceDatafromXml("Count_Not_Correct"));

                                                                logReport(false,

                                                                                                getResourceDatafromXml("Fail") + getResourceDatafromXml("Number_of_Days_before_File_Processed")

                                                                                                                                + getResourceDatafromXml("Displays_Zero"),

                                                                                                true);

                                                }

                                } catch (Exception e) {

                                                // TODO: handle exception

                                }

                                methodMessage("Reusable Method : Term_Name        - End");

                }

 

                /*************

                * @purpose Verify the Days Since Last File Processed Page

                * @param len

                * @return string

                * @author Shraddha_Mishra //Enter the Term Name in

                *         " Number_Of_Processed_Days"

                ******************/

 

                // Verify Days Since Last File Processed Page

                public void Verify_Count_Increased_By_1() {

 

                                try {

 

                                                HomePage HomePage = PageFactory.initElements(getDriver(), HomePage.class);

                                                String Number_Of_Processed_Days = HomePage.Number_Of_Processed_Days.getText(); // Enter

                                                                                                                                                                                                                                                                                                                                                                                // the

                                                                                                                                                                                                                                                                                                                                                                                // Term

                                                                                                                                                                                                                                                                                                                                                                                // Name

                                                                                                                                                                                                                                                                                                                                                                                // in

                                                                                                                                                                                                                                                                                                                                                                                // "

                                                                                                                                                                                                                                                                                                                                                                                // Number_Of_Processed_Days"

                                                long Number_Of_Days = Number_Of_Days();

                                                String Days = String.valueOf(Number_Of_Days);

                                                testStepMessage(getResourceDatafromXml("Days_Processed") + Number_Of_Processed_Days);

                                                testStepMessage(getResourceDatafromXml("Days_Difference") + Days);

                                                Load();

                                                String Count_proceesed_days = getdatafromXml("days");

                                                if (Number_Of_Processed_Days.contains(Count_proceesed_days)) {

 

                                                                testStepMessage(getStepsfromXml("Increased_Day"));

                                                                logReport(true, getResourceDatafromXml("Pass") + getStepsfromXml("Increased_Day"), true);

                                                }

 

                                                else {

                                                                testStepMessage(getResourceDatafromXml("Days_Not_Increased"));

                                                                logReport(false, getResourceDatafromXml("Fail") + getStepsfromXml("Days_Not_Increased"), true);

                                                }

                                } catch (Exception e) {

                                                // TODO: handle exception

                                }

                }

 

                /***********************************

                *

                 * @purpose: Number Of Days Before File Processed

                * @author : Sivanandareddy GPSR

                * @return : Void

                * @throws ParseException

                *

                 ***********************************/

 

                public long Number_Of_Days() {

 

                                methodMessage("Reusable Method : Number_Of_Days             - Start");

                                try {

 

                                                Date d1 = null;

                                                Date d2 = null;

 

                                                // HH converts hour in 24 hours format (0-23), day calculation

                                                SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");

                                                String UploadDate = getdatafromXml("UploadDate");

 

                                                // get current date time with Date()

                                                Date date = new Date();

                                                String CurrentDate = dateFormat.format(date);

 

                                                try {

                                                                d1 = dateFormat.parse(UploadDate);

                                                } catch (ParseException e) {

                                                                // TODO Auto-generated catch block

                                                                e.printStackTrace();

                                                }

                                                try {

                                                                d2 = dateFormat.parse(CurrentDate);

                                                } catch (ParseException e) {

                                                                // TODO Auto-generated catch block

                                                                e.printStackTrace();

                                                }

 

                                                // in milliseconds

                                                long diff = d2.getTime() - d1.getTime();

                                                diffDays = diff / (24 * 60 * 60 * 1000);

 

                                } catch (Exception e) {

                                                // TODO: handle exception

                                }

                                methodMessage("Reusable Method : Number_Of_Days             - End");

 

                                return diffDays;

                }

 

                /***********************************

                *

                 * @purpose: Filter Student ID

                * @author : Savi Grover

                * @return : Void

                *

                 ***********************************/

 

                public void Filter_StudentId_inEmailToStudent(String id) {

 

                                CommunicationPage CommunicationPage = PageFactory.initElements(getDriver(), CommunicationPage.class);

                                methodMessage("Reusable Method : Filter_StudentId_inEmailToStudent    - Start");

                                WebElement Filter = getDriver()

                                                                .findElement(By.xpath("//div[@id='grdStudents']/table/thead/tr/th[2]/a[1]/span"));

                                Filter.click();

                                Element_Load();

                                click(CommunicationPage.TextBox_Filter, "TextBox_Filter");

                                Element_Load();

                                clearAndSendKey(CommunicationPage.TextBox_Filter, id);

                                Element_Load();

                                try {

                                                Robot robot = new Robot();

                                                robot.setAutoDelay(100);

                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                robot.keyPress(KeyEvent.VK_SPACE);

                                } catch (AWTException e) {

                                                e.printStackTrace();

                                }

 

                                click(CommunicationPage.Filter_button, "Filter_button");

                                Element_Load();

                                methodMessage("Reusable Method : Filter_StudentId_inEmailToStudent    - End");

 

                                // Verify Value

                                waitForElementPresent(CommunicationPage.Student_id_Data, "Student_id_Data");

                                WebElement Data = getDriver().findElement(By.xpath("//div[@id='grdStudents']/table/tbody/tr/td[2]"));

                                String ID = Data.getText();

                                if (ID.equalsIgnoreCase(id)) {

                                                testStepMessage("Student ID Verified");

                                                logReport(true, "Student ID Verified", true);

                                }

 

                                else {

                                                testStepMessage("Student ID not Verified");

                                                logReport(false, "Student ID not Verified", true);

                                }

                                Element_Load();

                                click(CommunicationPage.Filter_Student, "Filter_Student");

                                Element_Load();

                                click(CommunicationPage.Clear_button, "Clear_button");

                                Element_Load();

 

                }

 

                /***********************************

                *

                 * @purpose: Filter Student ID

                * @author : Savi Grover

                * @return : Void

                *

                 ***********************************/

 

                public void Filter_StudentId_inEmailHistory(String id) {

 

                                CommunicationPage CommunicationPage = PageFactory.initElements(getDriver(), CommunicationPage.class);

                                methodMessage("Reusable Method : Filter_StudentId_inEmailHistory    - Start");

                                WebElement Filter = getDriver()

                                                                .findElement(By.xpath("//*[@id='grdStudentDetail']/table/thead/tr/th[2]/a[1]/span"));

                                Filter.click();

                                Element_Load();

                                click(CommunicationPage.TextBox_Filter, "TextBox_Filter");

                                Element_Load();

                                clearAndSendKey(CommunicationPage.TextBox_Filter, id);

                                Element_Load();

                                try {

                                                Robot robot = new Robot();

                                                robot.setAutoDelay(100);

                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                robot.keyPress(KeyEvent.VK_SPACE);

                                } catch (AWTException e) {

                                                e.printStackTrace();

                                }

 

                                click(CommunicationPage.Filter_button, "Filter_button");

                                Element_Load();

                                methodMessage("Reusable Method : Filter_StudentId_inEmailHistory    - End");

 

                                // Verify Value

                                waitForElementPresent(CommunicationPage.Student_id_Data, "Student_id_Data");

                                WebElement Data = getDriver().findElement(By.xpath("//div[@id='grdStudentDetail']/table/tbody/tr/td[2]"));

                                String ID = Data.getText();

                                if (ID.equalsIgnoreCase(id)) {

                                                testStepMessage("Student ID Verified");

                                                logReport(true, "Student ID Verified", true);

                                }

 

                                else {

                                                testStepMessage("Student ID not Verified");

                                                logReport(false, "Student ID not Verified", true);

                                }

                                Element_Load();

                                click(CommunicationPage.Filter_Student, "Filter_Student");

                                Element_Load();

                                click(CommunicationPage.Clear_button, "Clear_button");

                                Element_Load();

 

                }

 

                /***********************************

                *

                 * @purpose: Ascending Order of Values

                * @author : GPSR Sivanandareddy

                * @return : Void

                *

                 ***********************************/

                public void Verify_Order_By_Sorting() {

 

                                methodMessage("Reusable Method : Verify_Order_By_Sorting    - Start");

 

                                List<WebElement> StudentID_Data1 = getDriver()

                                                                .findElements(By.xpath("//*[@id='grdStudents']/table/tbody/tr/td[2]"));

                                System.out.println(StudentID_Data1.size());

                                String[] str = new String[StudentID_Data1.size()];

                                ArrayList<String> arrayList = new ArrayList<String>();

                                for (WebElement ele : StudentID_Data1) {

                                                if (ele.getText() != null)

                                                                System.out.println(ele.getText());

                                                arrayList.add(ele.getText());

                                }

 

                                System.out.println("StudentID_Data After Sorting" + arrayList.size());

 

                                if (isSorted(arrayList)) {

                                                System.out.println("String is sorted to Ascending order");

                                } else {

                                                System.out.println("String is not sorted to Ascending order");

                                }

 

                                methodMessage("Reusable Method :  Verify_Order_By_Sorting            - End");

                }

 

                /***********************************

                *

                 * @purpose: Ascending Order of Values

                * @author : GPSR Sivanandareddy

                * @return : Void

                *

                 ***********************************/

                public void Verify_Order_By_Sorting_EmailHistory() {

 

                                methodMessage("Reusable Method : Verify_Order_By_Sorting    - Start");

 

                                List<WebElement> StudentID_Data1 = getDriver()

                                                                .findElements(By.xpath("//*[@id='grdStudentDetail']/table/tbody/tr/td[2]"));

                                System.out.println(StudentID_Data1.size());

                                String[] str = new String[StudentID_Data1.size()];

                                ArrayList<String> arrayList = new ArrayList<String>();

                                for (WebElement ele : StudentID_Data1) {

                                                if (ele.getText() != null)

                                                                System.out.println(ele.getText());

                                                arrayList.add(ele.getText());

                                }

 

                                System.out.println("StudentID_Data After Sorting" + arrayList.size());

 

                                if (isSorted(arrayList)) {

                                                System.out.println("String is sorted to Ascending order");

                                } else {

                                                System.out.println("String is not sorted to Ascending order");

                                }

 

                                methodMessage("Reusable Method :  Verify_Order_By_Sorting            - End");

                }

 

                /***********************************

                *

                 * @purpose: Sorting Compare

                * @author : GPSR Sivanandareddy

                * @return : Void

                *

                 ***********************************/

 

                public boolean isSorted(ArrayList<String> list) {

                                boolean sorted = true;

                                for (int i = 1; i < list.size(); i++) {

                                                if (list.get(i - 1).compareTo(list.get(i)) > 0) {

                                                                System.out.println("Wrong Order Values :  " + list.get(i));

                                                                sorted = false;

                                                }

                                }

 

                                return sorted;

                }

 

                public boolean isSortedDesc(ArrayList<String> list) {

                                boolean sorted = true;

                                for (int i = 1; i < list.size(); i++) {

                                                if (list.get(i - 1).compareTo(list.get(i)) < 0) {

                                                                System.out.println("..." + list.get(i));

                                                                sorted = false;

                                                }

                                }

 

                                return sorted;

                }

 

                /***********************************

                *

                 * @purpose: Ascending Order of Values

                * @author : GPSR Sivanandareddy

                * @return : Void

                *

                 ***********************************/

                public void Verify_Order_By_SortingDesc_EmailHistory() {

 

                                methodMessage("Reusable Method : Verify_Order_By_SortingDesc_EmailHistory    - Start");

 

                                List<WebElement> StudentID_Data1 = getDriver()

                                                                .findElements(By.xpath("//*[@id='grdStudentDetail']/table/tbody/tr/td[2]"));

                                System.out.println(StudentID_Data1.size());

                                String[] str = new String[StudentID_Data1.size()];

                                ArrayList<String> arrayList = new ArrayList<String>();

                                for (WebElement ele : StudentID_Data1) {

                                                if (ele.getText() != null)

                                                                System.out.println(ele.getText());

                                                arrayList.add(ele.getText());

                                }

 

                                System.out.println("StudentID_Data After Sorting" + arrayList.size());

 

                                if (isSortedDesc(arrayList)) {

                                                System.out.println("String is sorted to Descending order");

                                } else {

                                                System.out.println("String is not sorted to Descending order");

                                }

 

                                methodMessage("Reusable Method :  Verify_Order_By_SortingDesc_EmailHistory            - End");

                }

 

                /***********************************

                *

                 * @purpose: Ascending Order of Values

                * @author : GPSR Sivanandareddy

                * @return : Void

                *

                 ***********************************/

                public void Verify_Order_By_SortingDesc() {

 

                                methodMessage("Reusable Method : Verify_Order_By_Sorting    - Start");

 

                                List<WebElement> StudentID_Data1 = getDriver()

                                                                .findElements(By.xpath("//*[@id='grdStudents']/table/tbody/tr/td[2]"));

                                System.out.println(StudentID_Data1.size());

                                String[] str = new String[StudentID_Data1.size()];

                                ArrayList<String> arrayList = new ArrayList<String>();

                                for (WebElement ele : StudentID_Data1) {

                                                if (ele.getText() != null)

                                                                System.out.println(ele.getText());

                                                arrayList.add(ele.getText());

                                }

 

                                System.out.println("StudentID_Data After Sorting" + arrayList.size());

 

                                if (isSortedDesc(arrayList)) {

                                                System.out.println("String is sorted to Ascending order");

                                                logReport(true, "String is sorted to Ascending order", true);

                                } else {

                                                System.out.println("String is not sorted to Ascending order");

                                                logReport(false, "String is not sorted to Ascending order", true);

                                }

 

                                methodMessage("Reusable Method :  Verify_Order_By_Sorting            - End");

                }

 

                /***********************************

                *

                 * @purpose: Press Space using ROBOT

                * @author : Karthik

                * @return : Void

                *

                 ***********************************/

                public void Robot_Space() {

                                try {

                                                Robot robot = new Robot();

                                                robot.setAutoDelay(100);

                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                robot.keyPress(KeyEvent.VK_SPACE);

                                } catch (AWTException e) {

                                                e.printStackTrace();

                                }

                }

 

                /***********************************

                *

                 * @purpose: Press SAVE shortcut using ROBOT

                * @author : Karthik

                * @return : Void

                *

                 ***********************************/

 

                public void Robot_Save() {

                                try {

                                                Robot robot = new Robot();

                                                robot.setAutoDelay(100);

                                                robot.keyPress(KeyEvent.VK_ALT);

                                                Thread.sleep(500);

                                                robot.keyPress(KeyEvent.VK_S);

                                                robot.keyRelease(KeyEvent.VK_ALT);

                                                robot.keyRelease(KeyEvent.VK_S);

                                } catch (AWTException | InterruptedException e) {

                                                e.printStackTrace();

                                }

                }

 

                /***********************************

                *

                 * @purpose: Press SAVE shortcut using ROBOT

                * @author : Karthik

                * @return : Void

                *

                 ***********************************/

 

                public void Windows_Authentication_VPN(String UserName, String Pwd) {

 

                                try {

                                                methodMessage("Reusable Method : Windows_Authentication_VPN                  - Start");

                                                WebElement user = getDriver().findElement(By.xpath("//input[@id='username']"));

 

                                                clearAndSendKey(user, UserName);

 

                                                WebElement PSWD = getDriver().findElement(By.cssSelector("#password_input"));

 

                                                clearAndSendKey(PSWD, Pwd);

 

                                                WebElement login = getDriver().findElement(By.xpath("//input[@name='Login']"));

 

                                                click(login, "Login Button");

                                                Load();

 

                                                methodMessage("VPN Login Successfully");

 

                                                WebElement web_access_arrow = getDriver().findElement(By.xpath("//img[@id='tab_web-access_arrow']"));

 

                                                click(web_access_arrow, "web_access_arrow");

 

                                                Load();

 

                                                // getDriver().navigate().to("http://sgpsr:gattupalli27@qasam.fheg.follett.com");

                                                getDriver().navigate().to(getdatafromXml("QA_SAM_Url"));

                                                Load();

 

                                                /* Windows_Authentication_New(); */

 

                                } catch (Exception e) {

                                                e.printStackTrace();

                                                logReport(false, "Unable to Windows_Authentication   ", false);

 

                                }

 

                                methodMessage("Reusable Method : Windows_Authentication                              - End");

                }

 

                /***********************************

                *

                 * @purpose: Press SAVE shortcut using ROBOT

                * @author : Karthik

                * @return : Void

                *

                 ***********************************/

 

                public void Windows_Authentication_New(String UserName, String Password) {

                                try {

                                                methodMessage("Reusable Method : Windows_Authentication                              - Start");

 

                                                Robot robot = new Robot();

                                                robot.setAutoDelay(100);

                                                performStringType("na\\" + UserName, robot);

                                                robot.keyPress(KeyEvent.VK_TAB);

                                                robot.keyRelease(KeyEvent.VK_TAB);

                                                performStringType(Password, robot);

                                                robot.setAutoDelay(100);

 

                                                robot.keyPress(KeyEvent.VK_ENTER);

                                                robot.keyRelease(KeyEvent.VK_ENTER);

                                                methodMessage("Windows Authentication Login Successfully");

                                } catch (Exception e) {

 

                                                e.printStackTrace();

                                }

 

                                methodMessage("Reusable Method : Windows_Authentication                              - End");

                }

 

                public void performStringType(String characters, Robot robot) {

 

                                StringSelection stringSelection = new StringSelection(characters);

                                Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();

                                clipboard.setContents(stringSelection, stringSelection);

 

                                robot.keyPress(KeyEvent.VK_CONTROL);

                                robot.keyPress(KeyEvent.VK_V);

                                robot.keyRelease(KeyEvent.VK_V);

                                robot.keyRelease(KeyEvent.VK_CONTROL);

                }

 

                /***********************************

                *

                 * @purpose: Windows Authentication CT

                * @author :Shraddha Mishra

                * @return : Void

                *

                 ***********************************/

 

                public void Windows_Authentication1() {

 

                                try {

                                                methodMessage(getResourceDatafromXml("Method_Start") + getResourceDatafromXml("VPN_Authentication"));

 

                                                WebElement user = getDriver().findElement(By.xpath("//input[@id='username']"));

 

                                                clearAndSendKey(user, getdatafromXml("UsernameVPN1"));

 

                                                WebElement PSWD = getDriver().findElement(By.cssSelector("#password_input"));

 

                                                clearAndSendKey(PSWD, getdatafromXml("PasswordVPN1"));

 

                                                WebElement login = getDriver().findElement(By.xpath("//input[@name='Login']"));

                                                waitElementClickable(login, getResourceDatafromXml("LoginButton"));

                                                click(login, getResourceDatafromXml("LoginButton"));

 

                                                Element_Load();

                                                methodMessage(getStepsfromXml("VPN_Login"));

                                                Element_Load();

                                                Load();

 

                                } catch (Exception e) {

                                                e.printStackTrace();

                                                logReport(false, getStepsfromXml("Unable_To_Login"), false);

 

                                }

 

                                methodMessage(getResourceDatafromXml("Method_End") + getResourceDatafromXml("VPN_Authentication"));

                }

 

                /*************

                * @purpose To launch CARP

                * @param CARP

                * @return void

                * @author Shraddha Mishra

                *

                 **********/

                public void launch_CARP() {

 

                                methodMessage("Reusable Method : launch_CARP        - Start");

                                try {

                                                setUrl(getdatafromXml("CARP_Url"));

                                                getDriver().navigate().to("javascript:document.getElementById('overridelink').click()");

                                                Load();

                                } catch (Exception e) {

                                                e.printStackTrace();

                                                logReport(false, "Unable to launch the CARP ", false);

                                }

 

                                methodMessage("Reusable Method :launch_CARP          - End");

                }

 

                /*************

                * @purpose To launch CARRR

                * @param CARRR

                * @return void

                * @author Karthik Kumar

                *

                 **********/

                public void launch_CARRR() {

 

                                methodMessage("Reusable Method : launch_CARRR        - Start");

                                try {

                                                setUrl(getdatafromXml("CARRR_Url"));

                                                // getDriver().navigate ().to

                                                // ("javascript:document.getElementById('overridelink').click()");

                                                // Element_Load();

                                } catch (Exception e) {

                                                e.printStackTrace();

                                                logReport(false, "Unable to launch the CARP ", false);

                                }

                                methodMessage("Reusable Method :launch_CARRR          - End");

                }

 

                public void getStatusVerify(String studentid) {

                                OrderSearchPage ordersearchpage = PageFactory.initElements(getDriver(), OrderSearchPage.class);

                                verifyElementPresentOnPage(ordersearchpage.StudentID_Order_TextBox, studentid);

                                clearAndSendKey(ordersearchpage.StudentID_Order_TextBox, studentid);

                                Element_Load();

                                click(ordersearchpage.Button_Order_Search, getResourceDatafromXml("Link_Srch"));

                                Element_Load();

 

                                // Use Filter Function

                                Filter_StudentID(studentid);

 

                }

 

                /***********************************

                *

                 * @purpose: Verify_Order_Search_Status

                * @author :

                * @return : Void

                *

                 ***********************************/

 

                public void Verify_Order_Search_StatusNew(String studentid, String Stat, String Termn, String Div, String Dep,

                                                String Crse, String Sec) {

 

                                methodMessage("Reusable Method : Verify Status         - Start");

 

                                try {

                                                String st[] = studentid.split(",");

                                                for (int l = 0; l < st.length; l++) {

                                                OrderSearchPage ordersearchpage = PageFactory.initElements(getDriver(), OrderSearchPage.class);

                                                verifyElementPresentOnPage(ordersearchpage.StudentID_Order_TextBox, studentid);

                                                clearAndSendKey(ordersearchpage.StudentID_Order_TextBox,st[l]);

                                                Element_Load();

                                                click(ordersearchpage.Button_Order_Search, getResourceDatafromXml("Link_Srch"));

                                                Element_Load();

                                               

                                                                // Use Filter Function

                                                                Filter_StudentID(st[l]);

 

                                                                boolean VerifyTerm = false;

                                                                List<WebElement> Element1 = getDriver()

                                                                                                .findElements(By.xpath("//*[@id='grdOrderSearch']/div[2]/table/tbody/tr/td[1]"));

                                                                int ColSize = Element1.size();

                                                                // System.out.println(ColSize);

 

                                                                for (int j = 1; j <= ColSize; j++) {

 

                                                                                WebElement Select_Tab = getDriver()

                                                                                                                .findElement(By.xpath("//*[@id='grdOrderSearch']/div[2]/table/tbody/tr[" + j

                                                                                                                                                + "]/td[1]/a[contains(text(),'SELECT')]"));

                                                                                Select_Tab.click();

                                                                                // System.out.println("CLIKCED***************");

 

                                                                                Load();

                                                                                List<WebElement> Element2 = getDriver()

                                                                                                                .findElements(By.xpath("//*[@id='grdOrdersDetails']/div[2]/table/tbody/tr"));

                                                                                int TableSize1 = Element2.size();

 

                                                                                OrderSearchPage OrderSearchPage = PageFactory.initElements(getDriver(), OrderSearchPage.class);

                                                                                verifyElementPresentOnPage(OrderSearchPage.FilterButton_OrdsrchTerm, "FilterButton_OrdsrchTerm");

                                                                                click(OrderSearchPage.FilterButton_OrdsrchTerm, "FilterButton_OrdsrchTerm");

                                                                                Load();

                                                                                verifyElementPresentOnPage(OrderSearchPage.TextInput_Term, "Filter_TextBox");

                                                                                clearAndSendKey(OrderSearchPage.TextInput_Term, Termn);

                                                                                Load();

                                                                                try {

                                                                                                Robot robot = new Robot();

                                                                                                robot.setAutoDelay(100);

                                                                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                                                } catch (AWTException e) {

                                                                                                e.printStackTrace();

                                                                                }

 

                                                                                Load();

                                                                                verifyElementPresentOnPage(OrderSearchPage.FilterButton_Final, "Filter_Button");

                                                                                click(OrderSearchPage.FilterButton_Final, "Filter_Button");

                                                                                Load();

                                                                                try {

                                                                                                Load();

                                                                                                // System.out.println("Entered in try loop");

                                                                                                VerifyTerm = getDriver().findElement(By.xpath("//span[contains(text(),'No items to display')]"))

                                                                                                                                .isDisplayed();

 

                                                                                                // verifyElementPresentOnPage(VerifyTerm, "Term");

                                                                                                if (VerifyTerm) {

 

                                                                                                                testStepMessage("Term is not present.");

                                                                                                                logReport1(false, "Term is not present.", true);

 

                                                                                                                // break;

                                                                                                }

 

                                                                                } catch (Exception e) {

                                                                                                // TODO: handle exception

 

                                                                                                // System.out.println("Entered in catch loop");

 

                                                                                                List<WebElement> TermA = getDriver()

                                                                                                                                .findElements(By.xpath("//*[@id='grdOrdersDetails']/div[2]/table/tbody/tr/td[9]"));

                                                                                                int TermSize = TermA.size();

 

                                                                                                // System.out.println("Below Table result

                                                                                                // grid"+TermA.size());

 

                                                                                                // System.out.println("Entered in else loop");

                                                                                                // Filter for Division

                                                                                                click(OrderSearchPage.FilterButton_OrdsrchDivision, "FilterButton_OrdsrchDivision");

                                                                                                Load();

                                                                                                verifyElementPresentOnPage(OrderSearchPage.TextInput_Division, "TextInput_Division");

                                                                                                clearAndSendKey(OrderSearchPage.TextInput_Division, Div);

                                                                                                Load();

                                                                                                try {

                                                                                                                Robot robot = new Robot();

                                                                                                                robot.setAutoDelay(100);

                                                                                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                                                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                                                                } catch (AWTException e1) {

                                                                                                                e1.printStackTrace();

                                                                                                }

 

                                                                                                Load();

                                                                                                verifyElementPresentOnPage(OrderSearchPage.FilterButton_FinalDivision,

                                                                                                                                "FilterButton_FinalDivision");

                                                                                                click(OrderSearchPage.FilterButton_FinalDivision, "FilterButton_FinalDivision");

                                                                                                Load();

                                                                                                Element_Load();

 

                                                                                                // Filter for Department

                                                                                                click(OrderSearchPage.FilterButton_OrdsrchDepartment, "FilterButton_OrdsrchDepartment");

                                                                                                Load();

                                                                                                verifyElementPresentOnPage(OrderSearchPage.TextInput_Department, "TextInput_Department");

                                                                                                clearAndSendKey(OrderSearchPage.TextInput_Department, Dep);

                                                                                                Load();

                                                                                                try {

                                                                                                                Robot robot = new Robot();

                                                                                                                robot.setAutoDelay(100);

                                                                                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                                                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                                                                } catch (AWTException e2) {

                                                                                                                e2.printStackTrace();

                                                                                                }

 

                                                                                                Load();

                                                                                                verifyElementPresentOnPage(OrderSearchPage.FilterButton_FinalDepartment,

                                                                                                                                "FilterButton_FinalDepartment");

                                                                                                click(OrderSearchPage.FilterButton_FinalDepartment, "FilterButton_FinalDepartment");

                                                                                                Load();

                                                                                                Element_Load();

 

                                                                                                // Filter for Course

                                                                                                click(OrderSearchPage.FilterButton_OrdsrchCourse, "FilterButton_OrdsrchCourse");

                                                                                                Element_Load();

 

                                                                                                Actions action2 = new Actions(getDriver());

                                                                                                action2.sendKeys(Keys.PAGE_DOWN);

                                                                                                action2.sendKeys(Keys.PAGE_DOWN);

                                                                                                action2.sendKeys(Keys.PAGE_DOWN);

                                                                                                action2.sendKeys(Keys.PAGE_DOWN);

                                                                                                // verifyElementPresentOnPage(OrderSearchPage.TextInput_Course,

                                                                                                // "TextInput_Course");

                                                                                                // clearAndSendKey(OrderSearchPage.TextInput_Course,

                                                                                                // "MIX1");

                                                                                                OrderSearchPage.TextInput_Course.clear();

                                                                                                OrderSearchPage.TextInput_Course.sendKeys(Crse);

                                                                                                Load();

                                                                                                try {

                                                                                                                Robot robot = new Robot();

                                                                                                                robot.setAutoDelay(100);

                                                                                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                                                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                                                                } catch (AWTException e3) {

                                                                                                                e3.printStackTrace();

                                                                                                }

 

                                                                                                Load();

                                                                                                verifyElementPresentOnPage(OrderSearchPage.FilterButton_FinalCourse,

                                                                                                                                "FilterButton_FinalCourse");

                                                                                                click(OrderSearchPage.FilterButton_FinalCourse, "FilterButton_FinalCourse");

                                                                                                Load();

                                                                                                Element_Load();

 

                                                                                                // Filter for Section

 

                                                                                                JavascriptExecutor js = (JavascriptExecutor) getDriver();

                                                                                                js.executeScript("arguments[0].click();", OrderSearchPage.FilterButton_OrdsrchSection);

                                                                                                click(OrderSearchPage.FilterButton_OrdsrchSection,"FilterButton_OrdsrchSection");

                                                                                                Element_Load();

                                                                                                action2.sendKeys(Keys.PAGE_DOWN);

                                                                                                action2.sendKeys(Keys.PAGE_DOWN);

                                                                                                action2.sendKeys(Keys.PAGE_DOWN);

                                                                                                action2.sendKeys(Keys.PAGE_DOWN);

                                                                                                OrderSearchPage.TextInput_Section.clear();

                                                                                                OrderSearchPage.TextInput_Section.sendKeys(Sec);

                                                                                                Load();

                                                                                                try {

                                                                                                                Robot robot = new Robot();

                                                                                                                robot.setAutoDelay(100);

                                                                                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                                                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                                                                } catch (AWTException e5) {

                                                                                                                e5.printStackTrace();

                                                                                                }

 

                                                                                                Load();

                                                                                                verifyElementPresentOnPage(OrderSearchPage.FilterButton_FinalSection,

                                                                                                                                "FilterButton_FinalSection");

                                                                                                click(OrderSearchPage.FilterButton_FinalSection, "FilterButton_FinalSection");

                                                                                                Load();

                                                                                                Element_Load();

 

                                                                                                // System.out.println(TableSize1);

                                                                                                Element_Load();

                                                                                                for (int i = 1; i <= TableSize1; i++) {

                                                                                                                String VerifyTermA = getDriver()

                                                                                                                                                .findElement(By.xpath(

                                                                                                                                                                                "//*[@id='grdOrdersDetails']/div[2]/table/tbody/tr[" + i + "]/td[9]"))

                                                                                                                                                .getText();

 

                                                                                                                if (VerifyTermA.contains(Termn)) {

                                                                                                                                // System.out.println("******Term is verified

                                                                                                                                // with

                                                                                                                                // the expected results*********");

                                                                                                                }

 

                                                                                                                WebElement ele2 = getDriver().findElement(

                                                                                                                                                By.xpath("//*[@id='grdOrdersDetails']/div[2]/table/tbody/tr[" + i + "]/td[2]"));

                                                                                                                String Status = ele2.getText();

                                                                                                                // String Stat1="Ordered";

                                                                                                                // System.out.println(Status);

 

                                                                                                                if (Status.equals(Stat))

 

                                                                                                                {

                                                                                                                                testStepMessage(getResourceDatafromXml("Digital_Ordr_Status") + Stat

                                                                                                                                                                + getResourceDatafromXml("Verify"));

                                                                                                                                logReport(true,

                                                                                                                                                                getResourceDatafromXml("Pass") + getResourceDatafromXml("Digital_Ordr_Status")

                                                                                                                                                                                                + getResourceDatafromXml("Verify"),

                                                                                                                                                                true);

                                                                                                                                // b=true;

                                                                                                                } else {

                                                                                                                                testStepMessage(getResourceDatafromXml("Digital_Ordr_Status") + Stat

                                                                                                                                                                + getResourceDatafromXml("Error"));

                                                                                                                                logReport1(false,

                                                                                                                                                                getResourceDatafromXml("Fail") + getResourceDatafromXml("Digital_Ordr_Status")

                                                                                                                                                                                                + getResourceDatafromXml("Error"),

                                                                                                                                                                true);

                                                                                                                                // b=false;

                                                                                                                }

 

                                                                                                                Element_Load();

 

                                                                                                }

 

                                                                                }

 

                                                                }

                                                                logReport(true, "Status is verified.", true);

 

                                                }

                                } catch (Exception e) {

 

                                                e.printStackTrace();

 

                                }

 

                                methodMessage("Reusable Method :Verify Status   - End");

 

                }

 

                /***********************************

                * Verify_Total_Number_Of_Pages

                *

                 * @purpose: Verify_Total_Number_Of_Pages

                * @author : Shraddha Mishra

                * @return : Void

                ***********************************/

                public void Verify_Total_Number_Of_Pages() {

 

                                try {

                                                methodMessage("Reusable Method :Verify Total Number Of Pages - Start");

                                                WebElement Element = getDriver().findElement(By.id("MainContent_lblTotalrecords"));

                                                String Count = Element.getText();

                                                testStepMessage(getResourceDatafromXml("Total_Page") + Count);

                                                logReport(true, getResourceDatafromXml("Pass") + getResourceDatafromXml("Total_Page") + Count, true);

                                } catch (Exception e) {

                                                e.printStackTrace();

                                                logReport(false, getResourceDatafromXml("Fail") + getResourceDatafromXml("Total_Page")

                                                                                + getResourceDatafromXml("not_correct"), true);

 

                                }

                                methodMessage("Reusable Method :Verify Total Number Of Pages - End");

 

                }

 

                /***********************************

                *

                 * @purpose: Filter

                * @author : Savi

                * @return : Void

                *

                 ***********************************/

                public void Filter_StudentID(String StudentID) {

 

                                methodMessage("Reusable Method : Filter StudentID                  - Start");

                                try {

                                                OrderSearchPage ordersearchpage = PageFactory.initElements(getDriver(), OrderSearchPage.class);

                                                testStepMessage(getStepsfromXml("A") + getStepsfromXml("Filter_StudentID"));

                                                verifyElementPresentOnPage(ordersearchpage.Filter_DownArrow, "Filter_DownArrow");

                                                click(ordersearchpage.Filter_DownArrow, "Filter_DownArrow");

                                                Element_Load();

                                                verifyElementPresentOnPage(ordersearchpage.Filter_TextBox, "Filter_TextBox");

                                                clearTextBoxValue(ordersearchpage.Filter_TextBox);

                                                clearAndSendKey(ordersearchpage.Filter_TextBox, StudentID);

                                                Element_Load();

                                                try {

                                                                Robot robot = new Robot();

                                                                robot.setAutoDelay(100);

                                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                } catch (AWTException e) {

                                                                e.printStackTrace();

                                                }

 

                                                Element_Load();

                                                verifyElementPresentOnPage(ordersearchpage.Filter_Button, "Filter_Button");

                                                click(ordersearchpage.Filter_Button, "Filter_Button");

                                                Element_Load();

                                                Element_Load();

                                } catch (Exception e) {

 

                                                e.printStackTrace();

                                }

 

                                methodMessage("Reusable Method : Filter StudentID  - End");

                }

 

                /***********************************

                *

                 * @purpose: New Section pricing

                * @author : Shraddha Mishra

                * @return : Void

                *

                 *         Do not change anything in the code

                ***********************************/

 

                // Check If Section is already added.

                public void SectionPricing(String Section1, String SectionPricing, String Price, String Term) {

 

                                methodMessage("Reusable Method : Delete Section Pricing -  Start");

                                Element_Load();

                                HomePage HomePage = PageFactory.initElements(getDriver(), HomePage.class);

                                PricingModelPage PricingModel = PageFactory.initElements(getDriver(), PricingModelPage.class);

                                hover(HomePage.Link_PricingModel);

                                waitElementClickable(HomePage.Link_SectionPricing, getResourceDatafromXml("Link_SectionPricing"));

                                click(HomePage.Link_SectionPricing, getResourceDatafromXml("Link_SectionPricing"));

                                Element_Load();

 

                                // Select Term

                                click(PricingModel.Dropdown_SectionTerm, getResourceDatafromXml("Dropdown_SectionTerm"));

                                Dropdown_click_List(PricingModel.List_Term_DpDn, Term);

                                Element_Load();

 

                                try {

                                                List<WebElement> tab = getDriver()

                                                                                .findElements(By.xpath("//table[@id='MainContent_gvSectionPricing']/tbody/tr"));

                                                int tabcount = tab.size();

                                                System.out.println("Table Size::>>" + tabcount);

 

                                                if (tabcount > 1) {

                                                                System.out.println("Inside IF condition");

                                                                for (int a = 2; a <= tabcount; a++) {

                                                                                System.out.println("Inside Loop");

                                                                                WebElement tabElement1 = getDriver()

                                                                                                                .findElement(By.xpath("//div[2]/table/tbody/tr[" + a + "]/td[2]"));

                                                                                String tabText1 = tabElement1.getText();

                                                                                System.out.println("tabText1" + tabText1);

                                                                                if (tabText1.equals(Section1)) {

                                                                                                System.out.println("Inside IF condition Course Section");

                                                                                                WebElement tabElement2 = getDriver()

                                                                                                                                .findElement(By.xpath("//div[2]/table/tbody/tr[" + a + "]/td[3]"));

                                                                                                String tabText2 = tabElement2.getText();

                                                                                                System.out.println("tabText2" + tabText2);

                                                                                                if (tabText2.equals(SectionPricing)) {

                                                                                                                System.out.println("Inside IF condition Course Pricing");

                                                                                                                WebElement tabElement3 = getDriver().findElement(

                                                                                                                                                By.xpath("//div[2]/table/tbody/tr[" + a + "]/td[9]/a[contains(text(),'Delete')]"));

                                                                                                                tabElement3.click();

                                                                                                                // click(tabElement3, "Click_Delete_Button");

                                                                                                                Element_Load();

                                                                                                                try {

                                                                                                                                Alert alert = getDriver().switchTo().alert();

                                                                                                                                getDriver().manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);

                                                                                                                                String alertText = alert.getText().trim();

                                                                                                                                System.out.println("Alert data: " + alertText);

                                                                                                                                Element_Load();

                                                                                                                } catch (org.openqa.selenium.UnhandledAlertException e) {

 

                                                                                                                }

 

                                                                                                }

                                                                                }

                                                                }

 

                                                } else {

                                                                System.out.println("Section Pricing need to setup");

                                                }

 

                                                // Add Section Pricing Model and code

                                                Element_Load();

                                                waitElementClickable(PricingModel.Dropdown_SectionTermPricing,

                                                                                getResourceDatafromXml("Dropdown_SectionTermPricing"));

 

                                                Load();

                                                PricingModel.Dropdown_SectionTermPricing.click();

                                                Dropdown_click_List(PricingModel.List_DDCS_DpDn, Section1);

 

                                                Element_Load();

                                                waitElementClickable(PricingModel.Dropdown_AddPricingModelCode, getResourceDatafromXml("PricingModelCode"));

                                                click(PricingModel.Dropdown_AddPricingModelCode, getResourceDatafromXml("PricingModelCode"));

                                                Dropdown_click_List(PricingModel.List_SecPrcng_DpDn, SectionPricing);

 

                                                Load();

 

                                                // Add Price

                                                Load();

                                                JavascriptExecutor js = (JavascriptExecutor) getDriver();

                                                js.executeScript("arguments[0].value = arguments[1];", PricingModel.TextBox_Price,

                                                                                getdatafromXml("VerifyPrice"));

                                                Load();

                                                Load();

 

                                                testStepMessage(getStepsfromXml("E") + getStepsfromXml("ClickAdd"));

                                                Element_Load();

 

                                                // Click Add Button

                                                PricingModel.TextBox_Price.sendKeys(Keys.TAB);

                                                WebElement ele = getDriver().findElement(By.id("MainContent_btnAddSectionPricing"));

                                                WebDriverWait wait = new WebDriverWait(getDriver(), 10);

                                                // Browser Window Handle don't delete this xpath

                                                ele = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("MainContent_btnAddSectionPricing")));

                                                ele.click();

                                                click(ele, getResourceDatafromXml("Btn_Add"));

                                                Element_Load();

 

                                                String SectionText = PricingModel.Verify_Section.getText();

                                                System.out.println("SectionText" + SectionText);

                                                String PricingText = PricingModel.Verify_SectionPricing.getText();

                                                System.out.println("PricingText" + PricingText);

                                                String PriceText = PricingModel.Verify_Price.getText();

                                                System.out.println("PriceText" + PriceText);

                                                Element_Load();

 

                                                if ((SectionText.equals(Section1)) && (PricingText.equals(SectionPricing)) && (PriceText.equals(Price))) {

                                                                Load();

                                                                testStepMessage(getStepsfromXml("VerifiedSectionPricing"));

                                                                logReport(true, getResourceDatafromXml("Pass") + SectionText + getResourceDatafromXml("Added"), true);

                                                                logReport(true, getResourceDatafromXml("Pass") + PricingText + getResourceDatafromXml("Added"), true);

                                                                logReport(true, getResourceDatafromXml("Pass") + PriceText + getResourceDatafromXml("Added"), true);

                                                } else {

 

                                                                testStepMessage("Fail:: Section pricing not Updated");

                                                }

 

                                } catch (UnhandledAlertException e) {

                                                e.printStackTrace();

                                }

 

                                methodMessage("Reusable Method : Delete Section Pricing -  End");

 

                }

 

                /*************

                * @purpose Delete and Verify Student pricing

                * @param SAM

                * @return void

                * @author GPSR Sivanandareddy

                *

                 **********/

 

                public void Delete_Verify_StudentPricing(String Str) {

 

                                Element_Load();

                                PricingModelPage PricingModel = PageFactory.initElements(getDriver(), PricingModelPage.class);

                                boolean flag = false;

                                boolean b = false;

                                List<WebElement> Next_Page = getDriver()

                                                                .findElements(By.xpath("//table[@id='MainContent_gvStudentPricing']/tbody/tr[9]/td/table/tbody/tr/td"));

 

                                // System.out.println(Next_Page.size());

                                for (int J = 1; J <= Next_Page.size(); J++) {

 

                                                // Verify and delete if student pricing is already added

                                                List<WebElement> GridRow = getDriver()

                                                                                .findElements(By.xpath("//table[@id='MainContent_gvStudentPricing']/tbody/tr/td[3]"));

                                                int GridSize = GridRow.size();

                                                Element_Load();

                                                for (int i = 0; i < GridSize; i++) {

 

                                                                String GridText = GridRow.get(i).getText();

                                                                // System.out.println(GridText);

                                                                if (GridText.contains(Str)) {

                                                                                WebElement StudentTermName = getDriver().findElement(By.xpath(

                                                                                                                "(//tbody)[3]/tr/td[./span[contains(text(),'Auto_kar4')]]/following-sibling::td[7]/a[contains(text(),'Delete')]"));

                                                                                // String Tname=StudentTermName.getText();

                                                                                click(StudentTermName, getResourceDatafromXml("StudentTermName"));

                                                                                Element_Load();

                                                                                try {

                                                                                                Alert alert = getDriver().switchTo().alert();

                                                                                                String alertText = alert.getText();

                                                                                                System.out.println("Alert data: " + alertText);

                                                                                                Element_Load();

                                                                                                alert.accept();

                                                                                                Element_Load();

                                                                                                flag = true;

                                                                                                break;

 

                                                                                } catch (Exception e) {

                                                                                                e.printStackTrace();

                                                                                }

 

                                                                } else

                                                                                continue;

                                                }

                                                if (flag == true) {

                                                                break;

                                                } else if (J == Next_Page.size()) {

 

                                                                testStepMessage(getStepsfromXml("Stu_Pricing"));

                                                                break;

 

                                                } else {

                                                                Load();

                                                                int Count = J + 1;

                                                                getDriver().findElement(By.xpath(

                                                                                                "//*[@id='MainContent_gvStudentPricing']/tbody/tr[9]/td/table/tbody/tr/td[" + Count + "]/a"))

                                                                                                .click();

                                                                Element_Load();

                                                }

 

                                }

 

                                Element_Load();

                                WebDriverWait wait = new WebDriverWait(getDriver(), 10);

                                WebElement Dropdown_StudentTerm = getDriver().findElement(By.id("MainContent_ddlSelectTermToAdd"));

                                Dropdown_StudentTerm = wait

                                                                .until(ExpectedConditions.visibilityOfElementLocated(By.id("MainContent_ddlSelectTermToAdd")));

 

                                // Select Term

                                testStepMessage(getStepsfromXml("E") + getStepsfromXml("SecPricingDetails"));

                                waitElementClickable(PricingModel.Dropdown_StudentTerm, getResourceDatafromXml("Dropdown_StudentTerm"));

                                click(PricingModel.Dropdown_StudentTerm, getResourceDatafromXml("Dropdown_StudentTerm"));

                                waitElementClickable(PricingModel.SecPrc_Term, getResourceDatafromXml("Text_Term"));

                                click(PricingModel.SecPrc_Term, getResourceDatafromXml("Text_Term"));

                                Element_Load();

 

                                // Select Student Pricing Model

                                waitElementClickable(PricingModel.Dropdown_StudentPricingModel,

                                                                getResourceDatafromXml("Dropdown_StudentPricingModel"));

                                click(PricingModel.Dropdown_StudentPricingModel, getResourceDatafromXml("Dropdown_StudentPricingModel"));

                                waitElementClickable(PricingModel.Text_Student_Pricing, getResourceDatafromXml("Text_Student_Pricing"));

                                click(PricingModel.Text_Student_Pricing, getResourceDatafromXml("Text_Student_Pricing"));

                                Load();

 

                                // Add Price

                                Load();

                                JavascriptExecutor js = (JavascriptExecutor) getDriver();

                                js.executeScript("arguments[0].value = arguments[1];", PricingModel.TextBox_Price,

                                                                getdatafromXml("VerifyPrice"));

 

                                // Click on Add Button

                                testStepMessage(getStepsfromXml("F") + getStepsfromXml("ClickAdd"));

                                Element_Load();

 

                                // Click Add Button

                                PricingModel.TextBox_Price.sendKeys(Keys.TAB);

                                WebElement ele = getDriver().findElement(By.id("MainContent_btnAddStudentPricing"));

                                ele = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("MainContent_btnAddStudentPricing")));

                                ele.click();

                                click(ele, getResourceDatafromXml("Btn_Add"));

                                Element_Load();

                                setCurrentURL("http://qasam.fheg.follett.com/StudentPricing.aspx");

                                HomePage HomePage = PageFactory.initElements(getDriver(), HomePage.class);

                                hover(HomePage.Link_PricingModel);

                                click(HomePage.Link_StudentPricing, getResourceDatafromXml("Student_Pricing"));

                                Element_Load();

 

                                // System.out.println(Next_Page.size());

                                for (int J = 1; J <= Next_Page.size(); J++) {

 

                                                // Verify and delete if student pricing is already added

                                                List<WebElement> GridRow = getDriver()

                                                                                .findElements(By.xpath("//table[@id='MainContent_gvStudentPricing']/tbody/tr/td[3]"));

                                                int GridSize = GridRow.size();

                                                Element_Load();

                                                for (int i = 0; i < GridSize; i++) {

 

                                                                String GridText = GridRow.get(i).getText();

                                                                // System.out.println(GridText);

                                                                if (GridText.contains(Str)) {

 

                                                                                WebElement StudentTermName = getDriver()

                                                                                                                .findElement(By.xpath("(//tbody)[3]/tr/td[./span[contains(text(),'Auto_kar4')]]"));

                                                                                highlightObject(StudentTermName);

                                                                                testStepMessage(Str + getResourceDatafromXml("Added"));

                                                                                logReport(true, getResourceDatafromXml("Pass") + Str + getResourceDatafromXml("Added"), true);

                                                                                b = true;

                                                                                break;

 

                                                                } else {

                                                                                continue;

 

                                                                }

                                                }

                                                if (b == true) {

                                                                break;

                                                } else if (J == Next_Page.size()) {

                                                                break;

 

                                                } else {

                                                                Load();

 

                                                                int Count = J + 1;

                                                                getDriver().findElement(By.xpath(

                                                                                                "//*[@id='MainContent_gvStudentPricing']/tbody/tr[9]/td/table/tbody/tr/td[" + Count + "]/a"))

                                                                                                .click();

                                                                Element_Load();

                                                }

 

                                }

                }

 

                /*************

                * @purpose Delete all files in a directory

                * @param

                * @return void

                * @author Karthik Kumar

                *

                 **********/

                public void deleteAllFiles() {

                                methodMessage("Reusable Method : DeleteAllFiles                      - Start");

                                File file = new File("C:\\Users\\" + System.getProperty("user.name") + "\\Downloads\\SAM_StudentRegistration");

                                String[] myFiles;

                                if (file.isDirectory()) {

                                                myFiles = file.list();

                                                for (int i = 0; i < myFiles.length; i++) {

                                                                File myFile = new File(file, myFiles[i]);

                                                                myFile.delete();

                                                }

                                }

                                methodMessage("Reusable Method : DeleteAllFiles                      - End");

                }

 

                /***********************************

                *

                 * @purpose: File Upload

                * @author : Karthik

                * @return : Void

                *

                 ***********************************/

 

                public void DeleteExcelRows() {

                                methodMessage("Reusable Method : DeleteExcelRows                               - Start");

                                FileInputStream fis = null;

                                try {

                                                fis = new FileInputStream(System.getProperty("user.dir") + "\\Resource\\TestData\\Student.xls");

                                                Workbook wb = new HSSFWorkbook(fis);

                                                Sheet sheet = wb.getSheet("Student");

 

                                                sheet = wb.getSheetAt(0);

 

                                                // start at row 1, to skip header row.

                                                for (int i = 0; i < sheet.getLastRowNum() + 1; i++) {

                                                                Row row = sheet.getRow(i);

                                                                String sku = row.getCell(0).getStringCellValue(); // yes, I know

                                                                                                                                                                                                                                                                                // it's

                                                                                                                                                                                                                                                                                // deprecated.

 

                                                                boolean keep = equals(sku);

                                                                if (!keep) {

                                                                                sheet.removeRow(row); // somehow, this has no effect on the

                                                                                                                                                                                // iteration over the Rows. Maybe

                                                                                                                                                                                // I'm iterating over "physical"

                                                                                                                                                                                // rows, and this removes a

                                                                                                                                                                                // "logical" row, or something?

                                                                } else {

                                                                                testStepMessage(getStepsfromXml("No_Records"));

                                                                }

 

                                                }

 

                                                FileOutputStream fos = null;

                                                fos = new FileOutputStream(System.getProperty("user.dir") + "\\Resource\\TestData\\Student.xls");

                                                wb.write(fos);

                                                fos.flush();

                                                fis.close();

                                                fos.close();

 

                                } catch (IOException e) {

 

                                                e.printStackTrace();

                                }

                                methodMessage("Reusable Method : DeleteExcelRows                               - End");

                }

 

                /*************

                * @purpose Same Student Drop

                * @param CARRR

                * @return void

                * @author Karthik Kumar

                *

                 **********/

 

                public void StudentDataRegDrop(String RegistrationAction) {

                                DecimalFormat decimalFormat = new DecimalFormat("#.#");

                                String DATE_FORMAT_NOW = "yyyy-MM-dd'T'HH:mm:ss'Z'";

                                Date date = new Date();

                                SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT_NOW, Locale.US);

                                sdf.setTimeZone(TimeZone.getTimeZone("GMT"));

                                methodMessage("Reusable Method : AddDataToExcelSheet                     - Start");

                                int rowNo = 1;

                                FileInputStream fis = null;

                                try {

                                                fis = new FileInputStream(System.getProperty("user.dir") + "\\Resource\\TestData\\Student.xls");

                                                Workbook wb = null;

                                                wb = new HSSFWorkbook(fis);

                                                FileOutputStream fos = null;

                                                fos = new FileOutputStream(System.getProperty("user.dir") + "\\Resource\\TestData\\Student.xls");

                                                Sheet sheet = wb.getSheet("Student");

                                                Row r = sheet.createRow(0);

                                                Cell c0 = r.createCell(0);

                                                c0.setCellValue("1.2");

                                                Cell c1 = r.createCell(1);

                                                c1.setCellValue("STUDENTREG");

                                                Cell c = r.createCell(2);

                                                c.setCellValue(sdf.format(new Date()));

 

                                                while (sheet.getRow(rowNo - 1) != null) {

                                                                rowNo++;

                                                }

                                                System.out.println("insert data at " + rowNo);

                                                Row row = sheet.createRow(rowNo - 1);

                                                String st = Getdata("StoreNumber");

                                                int storeno = Integer.parseInt(st);

                                                /*

                                                * Random orgCodeGen = new Random(); int orgzAccCode =

                                                * orgCodeGen.nextInt(); while (true) { orgzAccCode =

                                                * orgCodeGen.nextInt(); if (orgzAccCode > 1000 && orgzAccCode <

                                                * 9999) { break; } }

                                                *

                                                 * int StudentID = orgzAccCode;

                                                */

                                                Cell cell = row.createCell(0);

                                                cell.setCellValue(RegistrationAction);

                                                Cell cell1 = row.createCell(1);

                                                cell1.setCellValue(decimalFormat.format(storeno));

                                                Cell cell2 = row.createCell(2);

                                                cell2.setCellValue("AU" + StudID);

                                                Cell cell3 = row.createCell(3);

                                                cell3.setCellValue(Getdata("StudentLastName2") + StudID);

                                                Cell cell4 = row.createCell(4);

                                                cell4.setCellValue(Getdata("StudentMiddleName2") + StudID);

                                                Cell cell5 = row.createCell(5);

                                                cell5.setCellValue(Getdata("StudentFirstName2") + StudID);

                                                Cell cell6 = row.createCell(6);

                                                cell6.setCellValue(Getdata("StudentEmailAddress2") + StudID + email);

                                                Cell cell7 = row.createCell(7);

                                                cell7.setCellValue(Getdata("StudentPhoneNumber22") + StudID);

                                                Cell cell9 = row.createCell(9);

                                                cell9.setCellValue(Getdata("LMSUserID2") + StudID);

                                                Cell cell10 = row.createCell(10);

                                                cell10.setCellValue(Getdata("Campus13"));

                                                Cell cell11 = row.createCell(11);

                                                cell11.setCellValue(Getdata("Term13"));

                                                Cell cell12 = row.createCell(12);

                                                cell12.setCellValue(Getdata("StudentPricingModel2"));

                                                Cell cell13 = row.createCell(13);

                                                cell13.setCellValue(Getdata("ShippingPreference2"));

                                                Cell cell14 = row.createCell(14);

                                                cell14.setCellValue(Getdata(""));

                                                Cell cell17 = row.createCell(17);

                                                cell17.setCellValue(Getdata(""));

                                                Cell cell18 = row.createCell(18);

                                                cell18.setCellValue(Getdata(""));

                                                Cell cell19 = row.createCell(19);

                                                cell19.setCellValue(Getdata(""));

                                                Cell cell20 = row.createCell(20);

                                                cell20.setCellValue(Getdata(""));

                                                Cell cell21 = row.createCell(21);

                                                cell21.setCellValue(Getdata("Division2"));

                                                Cell cell22 = row.createCell(22);

                                                cell22.setCellValue(Getdata("Department2"));

                                                Cell cell23 = row.createCell(23);

                                                cell23.setCellValue(Getdata("CourseNumber13"));

                                                Cell cell24 = row.createCell(24);

                                                cell24.setCellValue(Getdata("Section13"));

                                                Cell cell26 = row.createCell(26);

                                                cell26.setCellValue(Getdata("CoursePricingModel2"));

                                                Cell cell29 = row.createCell(29);

                                                cell29.setCellValue(Getdata("PersonTypeIndicator2"));

                                                Cell cell30 = row.createCell(30);

                                                cell30.setCellValue(sdf.format(new Date()));

 

                                                wb.write(fos);

                                                fis.close();

                                                fos.close();

 

                                } catch (IOException e) {

 

                                                e.printStackTrace();

                                }

                                methodMessage("Reusable Method : AddDataToExcelSheet                     - End");

 

                }

 

                /*************

                * @purpose Set Student ID

                * @param

                * @return void

                * @author Karthik Kumar

                *

                 **********/

 

                public void getFileAndSetStudentID() {

 

                                File folder = new File(

                                                                "C:\\Users\\" + System.getProperty("user.name") + "\\Downloads\\SAM_StudentRegistration");

                                File[] listOfFiles = folder.listFiles();

                                String FileName = getdatafromXml("SRF");

                                for (int i = 0; i < listOfFiles.length; i++) {

                                                if (listOfFiles[i].isFile()) {

                                                                // System.out.println("File " + listOfFiles[i].getName());

                                                                if (listOfFiles[i].getName().contains(FileName)) {

                                                                                // System.out.println("contains that file");

                                                                                FileNamestr = listOfFiles[i].getName();

 

                                                                }

                                                } else if (listOfFiles[i].isDirectory()) {

                                                                // System.out.println("Directory " + listOfFiles[i].getName());

                                                }

 

                                }

 

                                System.out.println("File Name is:" + FileNamestr);

                                String ext = FilenameUtils.getExtension(FileNamestr);

                                System.out.println("extension is:" + ext);

                                if (ext.contains("csv") || ext.contains("xls") || ext.contains("xlsx")) {

                                                testStepMessage(getStepsfromXml("Excel_File"));

                                } else {

                                                testStepMessage(getStepsfromXml("Not_Excel_File"));

                                }

 

                                try {

                                                FileReader fr = null;

                                                BufferedReader br = null;

 

                                                fr = new FileReader("C:\\Users\\" + System.getProperty("user.name")

                                                                                + "\\Downloads\\SAM_StudentRegistration\\" + FileNamestr);

                                                br = new BufferedReader(fr);

                                                String line = null;

                                                ArrayList<Object> myList = new ArrayList<Object>();

                                                line = br.readLine();

                                                while (line != null) {

                                                                myList.add(line);

                                                                line = br.readLine();

                                                }

                                                String Head = (String) myList.get(1);

                                                System.out.println(Head);

                                                String[] temp;// ï»¿

                                                String HeaderColumn = Head.replaceAll("\\s+", ",");

                                                String rep = HeaderColumn.replaceAll("[,]+", "\n");

                                                // System.out.println("Rep******"+rep);

 

                                                temp = rep.split("\n");

 

                                                for (int i = 0; i < temp.length; i++) {

                                                                // System.out.println(temp[i]);

                                                }

 

                                                StudID = temp[2];

                                                String[] part = StudID.split("(?<=\\D)(?=\\d)");

                                                stt = part[0];

                                                String in = part[1];

                                                System.out.println("String Value" + stt);

                                                System.out.println("Integer Value" + in);

 

                                                StudID = in;

 

                                                System.out.println("***************stuID:" + StudID);

 

                                                fr.close();

 

                                } // try end

                                catch (IOException ioex) {

                                                System.out.print(ioex);

                                }

 

                }

 

                /***********************************

                *

                 * @purpose: Verify_NewOrder_Status

                * @author : Shraddha

                * @return : Void

                *

                 ***********************************/

 

                public void Verify_Order_Status(String Stat1, String Stat2, String TitleText, String Term, String Division,

                                                String Department, String Course, String Section) {

 

                                System.out.println("Reusable Method : Verify Order Status                        - Start");

 

                                try {

                                                boolean VerifyTerm = false;

                                                boolean flag = false;

                                                List<WebElement> Element1 = getDriver()

                                                                                .findElements(By.xpath("//*[@id='grdOrderSearch']/div[2]/table/tbody/tr/td[1]"));

                                                int ColSize = Element1.size();

 

                                                for (int j = 1; j <= ColSize; j++) {

 

                                                                if (flag) {

                                                                                break;

                                                                }

 

                                                                WebElement Select_Tab = getDriver()

                                                                                                .findElement(By.xpath("//*[@id='grdOrderSearch']/div[2]/table/tbody/tr[" + j

                                                                                                                                + "]/td[1]/a[contains(text(),'SELECT')]"));

                                                                Select_Tab.click();

 

                                                                Load();

                                                                Load();

                                                                List<WebElement> Element2 = getDriver()

                                                                                                .findElements(By.xpath("//*[@id='grdOrdersDetails']/div[2]/table/tbody/tr"));

                                                                int TableSize1 = Element2.size();

 

                                                                OrderSearchPage OrderSearchPage = PageFactory.initElements(getDriver(), OrderSearchPage.class);

                                                                verifyElementPresentOnPage(OrderSearchPage.FilterButton_OrdsrchTerm, "FilterButton_OrdsrchTerm");

                                                                click(OrderSearchPage.FilterButton_OrdsrchTerm, "FilterButton_OrdsrchTerm");

                                                                Load();

                                                                verifyElementPresentOnPage(OrderSearchPage.TextInput_Term, "Filter_TextBox");

                                                                clearAndSendKey(OrderSearchPage.TextInput_Term, Term);

                                                                Load();

                                                                try {

                                                                                Robot robot = new Robot();

                                                                                robot.setAutoDelay(100);

                                                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                                } catch (AWTException e) {

                                                                                e.printStackTrace();

                                                                }

 

                                                                Load();

                                                                verifyElementPresentOnPage(OrderSearchPage.FilterButton_Final, "Filter_Button");

                                                                click(OrderSearchPage.FilterButton_Final, "Filter_Button");

                                                                Load();

                                                                try {

                                                                                Load();

 

                                                                                VerifyTerm = getDriver().findElement(By.xpath("//span[contains(text(),'No items to display')]"))

                                                                                                                .isDisplayed();

 

                                                                                if (VerifyTerm) {

 

                                                                                                testStepMessage("Term is not present.");

                                                                                                logReport1(false, "Term is not present.", true);

 

                                                                                                // break;

                                                                                }

 

                                                                } catch (Exception e) {

                                                                                // TODO: handle exception

 

                                                                                List<WebElement> TermA = getDriver()

                                                                                                                .findElements(By.xpath("//*[@id='grdOrdersDetails']/div[2]/table/tbody/tr/td[9]"));

                                                                                int TermSize = TermA.size();

 

                                                                                // Filter for Division

                                                                                click(OrderSearchPage.FilterButton_OrdsrchDivision, "FilterButton_OrdsrchDivision");

                                                                                Load();

                                                                                verifyElementPresentOnPage(OrderSearchPage.TextInput_Division, "TextInput_Division");

                                                                                clearAndSendKey(OrderSearchPage.TextInput_Division, Division);

                                                                                Load();

                                                                                try {

                                                                                                Robot robot = new Robot();

                                                                                                robot.setAutoDelay(100);

                                                                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                                                } catch (AWTException e1) {

                                                                                                e1.printStackTrace();

                                                                                }

 

                                                                                Load();

                                                                                verifyElementPresentOnPage(OrderSearchPage.FilterButton_FinalDivision,

                                                                                                                "FilterButton_FinalDivision");

                                                                                click(OrderSearchPage.FilterButton_FinalDivision, "FilterButton_FinalDivision");

                                                                                Load();

                                                                                Element_Load();

 

                                                                                // Filter for Department

                                                                                click(OrderSearchPage.FilterButton_OrdsrchDepartment, "FilterButton_OrdsrchDepartment");

                                                                                Load();

                                                                                verifyElementPresentOnPage(OrderSearchPage.TextInput_Department, "TextInput_Department");

                                                                                clearAndSendKey(OrderSearchPage.TextInput_Department, Department);

                                                                                Load();

                                                                                try {

                                                                                                Robot robot = new Robot();

                                                                                                robot.setAutoDelay(100);

                                                                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                                                } catch (AWTException e2) {

                                                                                                e2.printStackTrace();

                                                                                }

 

                                                                                Load();

                                                                                verifyElementPresentOnPage(OrderSearchPage.FilterButton_FinalDepartment,

                                                                                                                "FilterButton_FinalDepartment");

                                                                                click(OrderSearchPage.FilterButton_FinalDepartment, "FilterButton_FinalDepartment");

                                                                                Load();

                                                                                Element_Load();

 

                                                                                // Filter for Course

                                                                                click(OrderSearchPage.FilterButton_OrdsrchCourse, "FilterButton_OrdsrchCourse");

                                                                                Element_Load();

 

                                                                                Actions action2 = new Actions(getDriver());

                                                                                action2.sendKeys(Keys.PAGE_DOWN);

                                                                                action2.sendKeys(Keys.PAGE_DOWN);

                                                                                action2.sendKeys(Keys.PAGE_DOWN);

                                                                                action2.sendKeys(Keys.PAGE_DOWN);

 

                                                                                OrderSearchPage.TextInput_Course.clear();

                                                                                OrderSearchPage.TextInput_Course.sendKeys(Course);

                                                                                Load();

                                                                                try {

                                                                                                Robot robot = new Robot();

                                                                                                robot.setAutoDelay(100);

                                                                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                                                } catch (AWTException e3) {

                                                                                                e3.printStackTrace();

                                                                                }

 

                                                                                Load();

                                                                                verifyElementPresentOnPage(OrderSearchPage.FilterButton_FinalCourse, "FilterButton_FinalCourse");

                                                                                click(OrderSearchPage.FilterButton_FinalCourse, "FilterButton_FinalCourse");

                                                                                Load();

                                                                                Element_Load();

 

                                                                                // Filter for Section

 

                                                                                JavascriptExecutor js = (JavascriptExecutor) getDriver();

                                                                                js.executeScript("arguments[0].click();", OrderSearchPage.FilterButton_OrdsrchSection);

 

                                                                                Element_Load();

                                                                                action2.sendKeys(Keys.PAGE_DOWN);

                                                                                action2.sendKeys(Keys.PAGE_DOWN);

                                                                                action2.sendKeys(Keys.PAGE_DOWN);

                                                                                action2.sendKeys(Keys.PAGE_DOWN);

                                                                                OrderSearchPage.TextInput_Section.clear();

                                                                                OrderSearchPage.TextInput_Section.sendKeys(Section);

                                                                                Load();

                                                                                try {

                                                                                                Robot robot = new Robot();

                                                                                                robot.setAutoDelay(100);

                                                                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                                                } catch (AWTException e5) {

                                                                                                e5.printStackTrace();

                                                                                }

 

                                                                                Load();

                                                                                verifyElementPresentOnPage(OrderSearchPage.FilterButton_FinalSection, "FilterButton_FinalSection");

                                                                                click(OrderSearchPage.FilterButton_FinalSection, "FilterButton_FinalSection");

                                                                                Load();

                                                                                Element_Load();

 

                                                                                Element_Load();

                                                                                for (int i = 1; i <= TableSize1; i++) {

                                                                                                String VerifyTermA = getDriver()

                                                                                                                                .findElement(

                                                                                                                                                                By.xpath("//*[@id='grdOrdersDetails']/div[2]/table/tbody/tr[" + i + "]/td[9]"))

                                                                                                                                .getText();

 

                                                                                                if (VerifyTermA.contains(Term)) {

 

                                                                                                }

 

                                                                                                System.out.println(TableSize1);

                                                                                                Element_Load();

                                                                                                for (int m = 1; m <= TableSize1; m++) {

 

                                                                                                                WebElement ele2 = getDriver().findElement(

                                                                                                                                                By.xpath("//*[@id='grdOrdersDetails']/div[2]/table/tbody/tr[" + m + "]/td[2]"));

                                                                                                                String Status = ele2.getText();

                                                                                                                String StatusA = ele2.getText();

                                                                                                                // String Stat1="Ordered";

                                                                                                                System.out.println(Status);

                                                                                                                Element_Load();

                                                                                                                WebElement ele3 = getDriver().findElement(

                                                                                                                                                By.xpath("//*[@id='grdOrdersDetails']/div[2]/table/tbody/tr[" + m + "]/td[7]"));

                                                                                                                String Title = ele3.getText();

                                                                                                                System.out.println(Title);

                                                                                                                Element_Load();

 

                                                                                                                if (Status.contains(Stat1) && Title.contains(TitleText))

 

                                                                                                                {

 

                                                                                                                                testStepMessage(getResourceDatafromXml("Digital_Ordr_Status") + Status

                                                                                                                                                                + getResourceDatafromXml("Verify"));

                                                                                                                                logReport(true,

                                                                                                                                                                getResourceDatafromXml("Pass") + getResourceDatafromXml("Digital_Ordr_Status")

                                                                                                                                                                                                + getResourceDatafromXml("Verify"),

                                                                                                                                                                true);

                                                                                                                                Element_Load();

                                                                                                                                flag = true;

                                                                                                                                break;

 

                                                                                                                } else if (StatusA.contains(Stat2) && Title.contains(TitleText)) {

                                                                                                                                Element_Load();

 

                                                                                                                                testStepMessage(getResourceDatafromXml("Digital_Ordr_Status") + Status

                                                                                                                                                                + getResourceDatafromXml("Verify"));

                                                                                                                                logReport(true,

                                                                                                                                                                getResourceDatafromXml("Pass") + getResourceDatafromXml("Digital_Ordr_Status")

                                                                                                                                                                                                + getResourceDatafromXml("Verify"),

                                                                                                                                                                true);

                                                                                                                                flag = true;

                                                                                                                                break;

                                                                                                                }

 

                                                                                                }

 

                                                                                }

 

                                                                }

 

                                                                System.out.println("Reusable Method :Verify Order Status         - End");

 

                                                }

 

                                } catch (Exception r) {

                                                r.printStackTrace();

                                }

                }

 

                /***********************************

                *

                 * @purpose: filter_term_DDCS

                * @author : Karthik

                * @return

                ***********************************/

 

                public void filter_term_DDCS(String Term, String Division, String Department, String Course, String Section) {

                                OrderSearchPage OrderSearchPage = PageFactory.initElements(getDriver(), OrderSearchPage.class);

 

                                // Filter for Term

                                verifyElementPresentOnPage(OrderSearchPage.FilterButton_OrdsrchTerm, "FilterButton_OrdsrchTerm");

                                click(OrderSearchPage.FilterButton_OrdsrchTerm, "FilterButton_OrdsrchTerm");

                                Load();

                                verifyElementPresentOnPage(OrderSearchPage.TextInput_Term, "Filter_TextBox");

                                clearAndSendKey(OrderSearchPage.TextInput_Term, Term);

                                Load();

                                try {

                                                Robot robot = new Robot();

                                                robot.setAutoDelay(100);

                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                robot.keyPress(KeyEvent.VK_SPACE);

                                } catch (AWTException e) {

                                                e.printStackTrace();

                                }

 

                                Load();

                                verifyElementPresentOnPage(OrderSearchPage.FilterButton_Final, "Filter_Button");

                                click(OrderSearchPage.FilterButton_Final, "Filter_Button");

                                Load();

                                Element_Load();

 

                                // Filter for Division

                                click(OrderSearchPage.FilterButton_OrdsrchDivision, "FilterButton_OrdsrchDivision");

                                Load();

                                verifyElementPresentOnPage(OrderSearchPage.TextInput_Division, "TextInput_Division");

                                clearAndSendKey(OrderSearchPage.TextInput_Division, Division);

                                Load();

                                try {

                                                Robot robot = new Robot();

                                                robot.setAutoDelay(100);

                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                robot.keyPress(KeyEvent.VK_SPACE);

                                } catch (AWTException e) {

                                                e.printStackTrace();

                                }

 

                                Load();

                                verifyElementPresentOnPage(OrderSearchPage.FilterButton_FinalDivision, "FilterButton_FinalDivision");

                                click(OrderSearchPage.FilterButton_FinalDivision, "FilterButton_FinalDivision");

                                Load();

                                Element_Load();

 

                                // Filter for Department

                                click(OrderSearchPage.FilterButton_OrdsrchDepartment, "FilterButton_OrdsrchDepartment");

                                Load();

                                verifyElementPresentOnPage(OrderSearchPage.TextInput_Department, "TextInput_Department");

                                clearAndSendKey(OrderSearchPage.TextInput_Department, Department);

                                Load();

                                try {

                                                Robot robot = new Robot();

                                                robot.setAutoDelay(100);

                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                robot.keyPress(KeyEvent.VK_SPACE);

                                } catch (AWTException e) {

                                                e.printStackTrace();

                                }

 

                                Load();

                                verifyElementPresentOnPage(OrderSearchPage.FilterButton_FinalDepartment, "FilterButton_FinalDepartment");

                                click(OrderSearchPage.FilterButton_FinalDepartment, "FilterButton_FinalDepartment");

                                Load();

                                Element_Load();

 

                                // Filter for Course

                                click(OrderSearchPage.FilterButton_OrdsrchCourse, "FilterButton_OrdsrchCourse");

                                Element_Load();

 

                                Actions action2 = new Actions(getDriver());

                                action2.sendKeys(Keys.PAGE_DOWN);

                                action2.sendKeys(Keys.PAGE_DOWN);

                                action2.sendKeys(Keys.PAGE_DOWN);

                                action2.sendKeys(Keys.PAGE_DOWN);

                                // verifyElementPresentOnPage(OrderSearchPage.TextInput_Course,

                                // "TextInput_Course");

                                // clearAndSendKey(OrderSearchPage.TextInput_Course, "MIX1");

                                OrderSearchPage.TextInput_Course.clear();

                                OrderSearchPage.TextInput_Course.sendKeys(Course);

                                Load();

                                try {

                                                Robot robot = new Robot();

                                                robot.setAutoDelay(100);

                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                robot.keyPress(KeyEvent.VK_SPACE);

                                } catch (AWTException e) {

                                                e.printStackTrace();

                                }

 

                                Load();

                                verifyElementPresentOnPage(OrderSearchPage.FilterButton_FinalCourse, "FilterButton_FinalCourse");

                                click(OrderSearchPage.FilterButton_FinalCourse, "FilterButton_FinalCourse");

                                Load();

                                Element_Load();

 

                                // Filter for Section

                                Element_Load();

                                JavascriptExecutor js = (JavascriptExecutor) getDriver();

                                js.executeScript("arguments[0].click();", OrderSearchPage.FilterButton_OrdsrchSection);

                                // click(OrderSearchPage.FilterButton_OrdsrchSection,

                                // "FilterButton_OrdsrchSection");

                                Element_Load();

                                action2.sendKeys(Keys.PAGE_DOWN);

                                action2.sendKeys(Keys.PAGE_DOWN);

                                action2.sendKeys(Keys.PAGE_DOWN);

                                action2.sendKeys(Keys.PAGE_DOWN);

                                OrderSearchPage.TextInput_Section.clear();

                                OrderSearchPage.TextInput_Section.sendKeys(Section);

                                Load();

                                try {

                                                Robot robot = new Robot();

                                                robot.setAutoDelay(100);

                                                robot.keyPress(KeyEvent.VK_SPACE);

                                                robot.keyPress(KeyEvent.VK_SPACE);

                                } catch (AWTException e) {

                                                e.printStackTrace();

                                }

 

                                Load();

                                verifyElementPresentOnPage(OrderSearchPage.FilterButton_FinalSection, "FilterButton_FinalSection");

                                click(OrderSearchPage.FilterButton_FinalSection, "FilterButton_FinalSection");

                                Load();

                                Element_Load();

 

                }

 

                /***********************************

                *

                 * @purpose: Count DPF FIle Passcodes count

                * @author : Karthik

                * @return : Void

                *

                 *         Do not change anything in the code

                ***********************************/

 

                public void StuIDFileCount() throws IOException {

                                BufferedReader bufferedReader = new BufferedReader(

                                                                new FileReader(System.getProperty("user.dir") + "\\Resource\\TestData\\UniqueStudentID.csv")); // DPFFilePath

                                                                                                                                                                                                                                                                                                                                                                                                                                                                // PasscodeFilePath

                                String input;

                                int count = 0;

                                while ((input = bufferedReader.readLine()) != null) {

                                                count++;

                                                // System.out.println("***************:>>"+input);

                                }

 

                                StudentIDCount = count;

                                // System.out.println("Count *********>>: "+Passcodecount);

                                bufferedReader.close();

                }

 

                /***********************************

                *

                 * @purpose: Find the last passcode Number in CSV File

                * @author : Karthik

                * @return : Void

                *

                 *         Do not change anything in the code

                ***********************************/

 

                public void StuIDCSVLastNumber() {

 

                                try {

                                                FileReader fr = null;

                                                BufferedReader br = null;

                                                fr = new FileReader(System.getProperty("user.dir") + "\\Resource\\TestData\\UniqueStudentID.csv"); // DPFFilePath

                                                                                                                                                                                                                                                                                                                                                                                                                                                                // PasscodeFilePath

                                                br = new BufferedReader(fr);

                                                String line = null;

                                                ArrayList<Object> myList = new ArrayList<Object>();

                                                line = br.readLine();

                                                while (line != null) {

                                                                myList.add(line);

                                                                line = br.readLine();

                                                }

                                                String Head = (String) myList.get(StudentIDCount - 1);

                                                // System.out.println(Head);

                                                String[] temp;// ï»¿

                                                String HeaderColumn = Head.replaceAll("[ï»¿]+", "");

                                                String rep = HeaderColumn.replaceAll("[,]+", "\n");

                                                // System.out.println("Rep******"+rep);

 

                                                temp = rep.split("\n");

 

                                                for (int i = 0; i < temp.length; i++) {

                                                                // System.out.println(temp[i]);

                                                }

 

                                                String str = temp[0];

                                                String[] part = str.split("(?<=\\D)(?=\\d)");

                                                stt = part[0];

                                                String in = part[1];

                                                System.out.println("String Value" + stt);

                                                System.out.println("Integer Value" + in);

 

                                                StuIDlastSeqNum = Integer.parseInt(in);

 

                                                System.out.println("*****Previous StudentID Number****" + StuIDlastSeqNum);

 

                                                fr.close();

 

                                } // try end

                                catch (IOException ioex) {

                                                System.out.print(ioex);

                                }

                }

 

                /***********************************

                *

                 * @purpose: Taking URL property from config file

                * @author : SantoshKumar

                * @return : String

                *

                 ***********************************/

 

                public String Getdata(String Data) {

                                FileInputStream fi;

 

                                String TestUrl = null;

                                try {

                                                fi = new FileInputStream(System.getProperty("user.dir") + "\\Resource\\TestData\\datafile.properties");

                                                Properties prop = new Properties();

                                                prop.load(fi);

                                                TestUrl = prop.getProperty(Data);

                                } catch (FileNotFoundException e) {

 

                                                e.printStackTrace();

                                } catch (IOException e) {

 

                                                e.printStackTrace();

                                }

 

                                return TestUrl;

 

                }

 

                /***********************************

                *

                 * @purpose: Clear CSV File data

                * @author : Karthik

                * @return : Void

                *

                 *         Do not change anything in the code

                ***********************************/

 

                public static void ClearStuIDcsv() throws Exception {

                                FileWriter fw = new FileWriter(System.getProperty("user.dir") + "\\Resource\\TestData\\UniqueStudentID.csv",

                                                                false); // DPFFilePath PasscodeFilePath

                                PrintWriter pw = new PrintWriter(fw, false);

                                pw.flush();

                                pw.close();

                                fw.close();

                }

 

                /***********************************

                *

                 * @purpose: New Student Registration write data in Excel with sequential

                *           Numbers

                * @author : Karthik

                * @return : Void

                *

                 *         Do not change anything in the code

                ***********************************/

 

                public void NewStudentDataReg1(String RegistrationAction) {

 

                                DecimalFormat decimalFormat = new DecimalFormat("#.#");

                                String DATE_FORMAT_NOW = "yyyy-MM-dd'T'HH:mm:ss'Z'";

                                Date date = new Date();

                                SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT_NOW, Locale.US);

                                sdf.setTimeZone(TimeZone.getTimeZone("GMT"));

                                methodMessage("Reusable Method : AddDataToExcelSheet                     - Start");

                                int rowNo = 1;

                                FileInputStream fis = null;

                                try {

                                                fis = new FileInputStream(System.getProperty("user.dir") + "\\Resource\\TestData\\Student.xls");

                                                Workbook wb = null;

                                                wb = new HSSFWorkbook(fis);

                                                FileOutputStream fos = null;

                                                fos = new FileOutputStream(System.getProperty("user.dir") + "\\Resource\\TestData\\Student.xls");

                                                Sheet sheet = wb.getSheet("Student");

                                                Row r = sheet.createRow(0);

                                                Cell c0 = r.createCell(0);

                                                c0.setCellValue("1.2");

                                                Cell c1 = r.createCell(1);

                                                c1.setCellValue("STUDENTREG");

                                                Cell c = r.createCell(2);

                                                c.setCellValue(sdf.format(new Date()));

 

                                                while (sheet.getRow(rowNo - 1) != null) {

                                                                rowNo++;

                                                }

                                                System.out.println("insert data at " + rowNo);

                                                Row row = sheet.createRow(rowNo - 1);

                                                String st = Getdata("StoreNumber");

                                                int storeno = Integer.parseInt(st);

 

                                                FileWriter writer = null;

                                                String PassCodeString = null;

                                                try {

 

                                                                writer = new FileWriter(System.getProperty("user.dir") + "\\Resource\\TestData\\UniqueStudentID.csv");

                                                                long PasscodeInteger = (StuIDlastSeqNum + 1);

                                                                PassCodeString = Long.toString(PasscodeInteger);

                                                                writer.append(stt + PassCodeString);

                                                                System.out.println("StudentID appended");

 

                                                } catch (IOException e) {

                                                                e.printStackTrace();

                                                } finally {

                                                }

 

                                                writer.flush();

                                                writer.close();

 

                                                Cell cell = row.createCell(0);

                                                cell.setCellValue(RegistrationAction);

                                                Cell cell1 = row.createCell(1);

                                                cell1.setCellValue(decimalFormat.format(storeno));

                                                Cell cell2 = row.createCell(2);

                                                cell2.setCellValue(stt + PassCodeString);

                                                Cell cell3 = row.createCell(3);

                                                cell3.setCellValue(Getdata("StudentLastName2") + PassCodeString);

                                                Cell cell4 = row.createCell(4);

                                                cell4.setCellValue(Getdata("StudentMiddleName2") + PassCodeString);

                                                Cell cell5 = row.createCell(5);

                                                cell5.setCellValue(Getdata("StudentFirstName2") + PassCodeString);

                                                Cell cell6 = row.createCell(6);

                                                cell6.setCellValue(Getdata("StudentEmailAddress2") + PassCodeString + email);

                                                Cell cell7 = row.createCell(7);

                                                cell7.setCellValue(Getdata("StudentPhoneNumber22") + PassCodeString);

                                                Cell cell9 = row.createCell(9);

                                                cell9.setCellValue(Getdata("LMSUserID2") + PassCodeString);

                                                Cell cell10 = row.createCell(10);

                                                cell10.setCellValue(Getdata("Campus10"));

                                                Cell cell11 = row.createCell(11);

                                                cell11.setCellValue(Getdata("Term13"));

                                                Cell cell12 = row.createCell(12);

                                                cell12.setCellValue(Getdata("StudentPricingModel2"));

                                                Cell cell13 = row.createCell(13);

                                                cell13.setCellValue(Getdata("ShippingPreference2"));

                                                Cell cell14 = row.createCell(14);

                                                cell14.setCellValue(Getdata(""));

                                                Cell cell17 = row.createCell(17);

                                                cell17.setCellValue(Getdata(""));

                                                Cell cell18 = row.createCell(18);

                                                cell18.setCellValue(Getdata(""));

                                                Cell cell19 = row.createCell(19);

                                                cell19.setCellValue(Getdata(""));

                                                Cell cell20 = row.createCell(20);

                                                cell20.setCellValue(Getdata(""));

                                                Cell cell21 = row.createCell(21);

                                                cell21.setCellValue(Getdata("Division2"));

                                                Cell cell22 = row.createCell(22);

                                                cell22.setCellValue(Getdata("Department2"));

                                                Cell cell23 = row.createCell(23);

                                                cell23.setCellValue(Getdata("CourseNumber10"));

                                                Cell cell24 = row.createCell(24);

                                                cell24.setCellValue(Getdata("Section13"));

                                                Cell cell26 = row.createCell(26);

                                                cell26.setCellValue(Getdata("CoursePricingModel2"));

                                                Cell cell29 = row.createCell(29);

                                                cell29.setCellValue(Getdata("PersonTypeIndicator2"));

                                                Cell cell30 = row.createCell(30);

                                                cell30.setCellValue(sdf.format(new Date()));

 

                                                wb.write(fos);

                                                fis.close();

                                                fos.close();

 

                                } catch (IOException e) {

 

                                                e.printStackTrace();

                                }

                                methodMessage("Reusable Method : AddDataToExcelSheet                     - End");

                }

 

                /***********************************

                *

                 * @purpose: Verify_Checkbox_is_Disabled

                * @author : Shraddha Mishra

                * @return : Void

                ***********************************/

 

                public void Verify_Checkbox_is_Disabled() {

 

                                try {

                                                methodMessage("Reusable Method :Verify Checkbox is Disabled - Start");

 

                                                WebElement checkbox = getDriver().findElement(By.id("MainContent_gvJobResubmit_chkResubmit"));

                                                // String status = checkbox.getAttribute("disabled");

                                                if (checkbox.isEnabled()) {

 

                                                                testStepMessage(getResourceDatafromXml("Checknox_Status") + getResourceDatafromXml("not_disable"));

                                                                logReport(false, getResourceDatafromXml("Fail") + getResourceDatafromXml("Checknox_Status")

                                                                                                + getResourceDatafromXml("not_disable"), true);

                                                } else {

 

                                                }

                                                testStepMessage(getResourceDatafromXml("Checknox_Status") + getResourceDatafromXml("disable"));

                                                logReport(true, getResourceDatafromXml("Pass") + getResourceDatafromXml("Checknox_Status")

                                                                                + getResourceDatafromXml("disable"), true);

                                }

 

                                catch (Exception e) {

                                                e.printStackTrace();

                                                logReport(false, "Verified that checkbox is not disabled", true);

 

                                }

                                methodMessage("Reusable Method :Verify Checkbox is Disabled - End");

 

                }

 

                /***********************************

                *

                 * @purpose: Vrfy_Error_ValdtnMsg /TestCase 54

                * @author : Karthik

                * @return : Void

                *

                 ***********************************/

 

                public void Vrfy_Error_ValdtnMsg() {

                                methodMessage("Reusable Method : Verify Status                        - Start");

 

                                try {

                                                Element_Load();

                                                WebElement Status1 = getDriver().findElement(By.id("MainContent_lblError"));

                                                String Str = Status1.getText();

                                                System.out.println("*********************" + Str + "**************************");

                                                String Status = getdatafromXml("Status_Search");

                                                if (Str.contains(Status)) {

                                                                testStepMessage(getResourceDatafromXml("Error_Msg") + getResourceDatafromXml("Verify"));

                                                                logReport(true, getResourceDatafromXml("Pass") + getResourceDatafromXml("Error_Msg")

                                                                                                + getResourceDatafromXml("Verify"), true);

                                                } else {

                                                                testStepMessage(getResourceDatafromXml("Error_Msg") + getResourceDatafromXml("Error"));

                                                                logReport(false, getResourceDatafromXml("Fail") + getResourceDatafromXml("Error_Msg")

                                                                                                + getResourceDatafromXml("Error"), true);

                                                }

 

                                } catch (Exception e) {

 

                                                e.printStackTrace();

                                }

 

                                methodMessage("Reusable Method :Verify Status         - End");

 

                }

 

                /***********************************

                *

                 * @purpose: Vrfy_Vald_TodtMsg

                * @author : Karthik

                * @return : Void

                *

                 ***********************************/

 

                public void Vrfy_Vald_TodtMsg() {

                                methodMessage("Reusable Method : Verify Status- for the Incorrect Date- Start");

 

                                try {

                                                WebElement Status1 = getDriver().findElement(By.id("MainContent_lblError"));

                                                String Str = Status1.getText();

                                                System.out.println("*********************" + Str + "**************************");

                                                String Status = getdatafromXml("Status_EndDate");

                                                if (Str.contains(Status)) {

                                                                testStepMessage(getResourceDatafromXml("Error_Msg") + getResourceDatafromXml("Verify"));

                                                                logReport(true, getResourceDatafromXml("Pass") + getResourceDatafromXml("Error_Msg")

                                                                                                + getResourceDatafromXml("Verify"), true);

                                                } else {

                                                                testStepMessage(getResourceDatafromXml("Error_Msg") + getResourceDatafromXml("Error"));

                                                                logReport(false, getResourceDatafromXml("Fail") + getResourceDatafromXml("Error_Msg")

                                                                                                + getResourceDatafromXml("Error"), true);

                                                }

 

                                } catch (Exception e) {

 

                                                e.printStackTrace();

                                }

 

                                methodMessage("Reusable Method- for the Incorrect Date- End");

 

                }

 

                /***********************************

                *

                 * @purpose: Test case 55 MainContent_lblError

                * @author : Karthik

                * @return : Void

                *

                 ***********************************/

 

                public void Vrfy_Vald_FrmdtMsg() {

                                methodMessage("Reusable Method : Verify Status                        - Start");

 

                                try {

                                                WebElement Status1 = getDriver().findElement(By.id("MainContent_lblError"));

                                                String Str = Status1.getText();

                                                System.out.println("*********************" + Str + "**************************");

                                                String Status = getdatafromXml("Status_Date");

                                                if (Str.contains(Status)) {

 

                                                                testStepMessage(getResourceDatafromXml("Error_Msg") + getResourceDatafromXml("Verify"));

                                                                logReport(true, getResourceDatafromXml("Pass") + getResourceDatafromXml("Error_Msg")

                                                                                                + getResourceDatafromXml("Verify"), true);

                                                } else {

                                                                testStepMessage(getResourceDatafromXml("Error_Msg") + getResourceDatafromXml("Error"));

                                                                logReport(false, getResourceDatafromXml("Fail") + getResourceDatafromXml("Error_Msg")

                                                                                                + getResourceDatafromXml("Error"), true);

                                                }

 

                                } catch (Exception e) {

 

                                                e.printStackTrace();

                                }

 

                                methodMessage("Reusable Method :Verify Status         - End");

 

                }

 

                /***********************************

                *

                 * @purpose: Vrfy_plz_enter_EndDate

                * @author : Karthik

                * @return : Void

                *

                 ***********************************/

 

                public void Vrfy_plz_enter_EndDate() {

                                methodMessage("Reusable Method : Verify Status- when end date not mentioned                       - Start");

 

                                try {

                                                WebElement Status1 = getDriver().findElement(By.id("MainContent_lblError"));

                                                String Str = Status1.getText();

                                                System.out.println("*********************" + Str + "**************************");

                                                String Status = getdatafromXml("Status_EndTime");

                                                if (Str.contains(Status)) {

 

                                                                testStepMessage(getResourceDatafromXml("Error_Msg") + getResourceDatafromXml("Verify"));

                                                                logReport(true, getResourceDatafromXml("Pass") + getResourceDatafromXml("Error_Msg")

                                                                                                + getResourceDatafromXml("Verify"), true);

                                                } else {

                                                                testStepMessage(getResourceDatafromXml("Error_Msg") + getResourceDatafromXml("Error"));

                                                                logReport(false, getResourceDatafromXml("Fail") + getResourceDatafromXml("Error_Msg")

                                                                                                + getResourceDatafromXml("Error"), true);

                                                }

 

                                } catch (Exception e) {

 

                                                e.printStackTrace();

                                }

 

                                methodMessage("Reusable Method- when end date not mentioned                    -End");

 

                }

 

                /***********************************

                *

                 * @purpose: Vrfy_plz_enter_FromDate

                * @author : Karthik

                * @return : Void

                *

                 ***********************************/

 

                public void Vrfy_plz_enter_FromDate() {

                                methodMessage("Reusable Method : Verify Status- when From date not mentioned- Start");

 

                                try {

                                                WebElement Status1 = getDriver().findElement(By.id("MainContent_lblError"));

                                                String Str = Status1.getText();

                                                System.out.println("*********************" + Str + "**************************");

                                                String Status = getdatafromXml("Status_Time");

                                                if (Str.contains(Status)) {

 

                                                                testStepMessage(getResourceDatafromXml("Error_Msg") + getResourceDatafromXml("Verify"));

                                                                logReport(true, getResourceDatafromXml("Pass") + getResourceDatafromXml("Error_Msg")

                                                                                                + getResourceDatafromXml("Verify"), true);

                                                } else {

                                                                testStepMessage(getResourceDatafromXml("Error_Msg") + getResourceDatafromXml("Error"));

                                                                logReport(false, getResourceDatafromXml("Fail") + getResourceDatafromXml("Error_Msg")

                                                                                                + getResourceDatafromXml("Error"), true);

                                                }

                                } catch (Exception e) {

 

                                                e.printStackTrace();

                                }

 

                                methodMessage("Reusable Method- when From date not mentioned- End");

 

                }

                /***********************************

                *

                 * @purpose: CSVFileHeaderColumnSellThrough_Verify DDCS

                * @author : Karthik

                * @return : Void

                *

                 ***********************************/

                public void CSVFileHeaderColumnSellThrough() {

 

                                try {

                                                FileReader fr = null;

                                                BufferedReader br = null;

                                                fr = new FileReader(

                                                                                "C:\\Users\\" + System.getProperty("user.name") + "\\Downloads\\9947_Sell_Through_Report.csv");

                                                br = new BufferedReader(fr);

                                                String line = null;

                                                ArrayList<Object> myList = new ArrayList<Object>();

                                                line = br.readLine();

                                                while (line != null) {

                                                                myList.add(line);

                                                                line = br.readLine();

                                                }

 

                                                // Verify Header

                                                String Head1 = (String) myList.get(0);

                                                testStepMessage(Head1);

                                                String Head2 = (String) myList.get(1);

                                                testStepMessage(Head2);

                                                String Head3 = (String) myList.get(2);

                                                testStepMessage(Head3);

                                                String Head4 = (String) myList.get(3);

                                                testStepMessage(Head4);

                                                String Head5 = (String) myList.get(4);

                                                testStepMessage(Head5);

 

                                                // Verify Column Headers

                                                String Head = (String) myList.get(6);

                                                testStepMessage(Head);

                                                String[] temp;// ï»¿

                                                String HeaderColumn = Head.replaceAll("[ï»¿]+", "");

                                                String rep = HeaderColumn.replaceAll("[,]+", "\n");

 

                                                // System.out.println("Rep******"+rep);

 

                                                temp = rep.split("\n");

 

                                                for (int i = 0; i < temp.length; i++) {

                                                                testStepMessage(temp[i]);

                                                                temp = rep.split("\n");

                                                }

 

                                                if ((temp[0].contains(getdatafromXml("Field1"))) && (temp[1].contains(getdatafromXml("Field2"))) &&

 

                                                                                (temp[2].contains(getdatafromXml("Field3"))) && (temp[3].contains(getdatafromXml("Field4"))) &&

 

                                                                                (temp[4].contains(getdatafromXml("Field5"))) && (temp[5].contains(getdatafromXml("Field6"))) &&

 

                                                                                (temp[6].contains(getdatafromXml("Field7"))) && (temp[7].contains(getdatafromXml("Field8"))) &&

 

                                                                                (temp[8].contains(getdatafromXml("Field9"))) && (temp[9].contains(getdatafromXml("Field10"))) &&

 

                                                                                (temp[10].contains(getdatafromXml("Field11"))) && (temp[11].contains(getdatafromXml("Field12"))) &&

 

                                                                                (temp[12].contains(getdatafromXml("Field13"))) && (temp[13].contains(getdatafromXml("Field14"))) &&

 

                                                                                (temp[14].contains(getdatafromXml("Field15")))) {

                                                                logReport(true, getResourceDatafromXml("Columns_Headers") + getResourceDatafromXml("Verify"), true);

                                                                testStepMessage(getResourceDatafromXml("Columns_Headers") + getResourceDatafromXml("Verify"));

                                                                // testStepMessage(getResourceDatafromXml("Verify"));

 

                                                }

 

                                                // Verify Column Data for DDCS

                                                String Head08 = (String) myList.get(7);

                                                testStepMessage(Head08);

                                                String Head09 = (String) myList.get(9);

                                                testStepMessage(Head09);

 

                                                if (Head08 != null && Head09 != null) {

 

                                                                String Head10 = (String) myList.get(8);

                                                                String Head11 = (String) myList.get(10);

 

                                                                if (Head10 != null && Head11 != null) {

 

                                                                                for (int j = 1; j < temp.length; j++) {

                                                                                                if (temp[j] != null) {

                                                                                                                testStepMessage(getResourceDatafromXml("Columns_Data"));

                                                                                                } else {

                                                                                                                testStepMessage(getResourceDatafromXml("Columns_NoData"));

                                                                                                }

                                                                                }

                                                                }

 

                                                                fr.close();

                                                }

                                }

                                // try end

                                catch (IOException ioex) {

                                                System.out.print(ioex);

                                }

                }

 

                public void Dropdown_click_List(List<WebElement> Webelement, String Dropdown_Value) {

                                int count = Webelement.size();

                                System.out.println("Dropdown contains " + count + " Values ");

                                for (int i = 0; i < count; i++) {

                                                if (Webelement.get(i).getText().contains(Dropdown_Value)) {

 

                                                                Webelement.get(i).click();

 

                                                                break;

                                                }

                                }

                }

 

                public String getXMLListData(String parentNode) {

 

                                ArrayList<String> nodaFlowValues = getXMLList("parentNode");

                                for (String Values : nodaFlowValues) {

                                                System.out.println(Values);

                                }

                                return parentNode;

                }

 

 

 

 

                /***********************************

                *

                 * @purpose: Student_Instructor_Verification

                 * @author : Karthik

                * @return : Void

                *

                 ***********************************/

                public void Student_Instructor_Verification()

                {

 

 

                                try {

                                                FileReader fr = null;

                                                BufferedReader br = null;

                                fr = new FileReader("C:\\Users\\" + System.getProperty("user.name") + "\\Downloads\\9947_Sell_Through_Report.csv");

                                                br = new BufferedReader(fr);

                                                String line = null;

                                                ArrayList<Object> myList = new ArrayList<Object>();

                                                line = br.readLine();

                                                while (line != null) {

                                                                myList.add(line);

                                                                line = br.readLine();

                                                }

                                                // Initial Information

                                                String Head1 = (String) myList.get(0);

                                                testStepMessage(Head1);

                                                String Head2 = (String) myList.get(1);

                                                testStepMessage(Head2);

                                                String Head3 = (String) myList.get(2);

                                                testStepMessage(Head3);

                                                String Head4 = (String) myList.get(3);

                                                testStepMessage(Head4);

                                                String Head5 = (String) myList.get(4);

                                                testStepMessage(Head5);

 

                                                // Column Headers

                                                String Head = (String) myList.get(6);

                                                testStepMessage(Head);

                                                String[] temp;// ï»¿

                                                String HeaderColumn = Head.replaceAll("[ï»¿]+", "");

                                                String rep = HeaderColumn.replaceAll("[,]+", "\n");

 

                                                // System.out.println("Rep******"+rep);

 

                                                temp = rep.split("\n");

 

                                                for (int i = 0; i < temp.length; i++) {

                                                                testStepMessage(temp[i]);

                                                                temp = rep.split("\n");

                                                }

 

                                                if ((temp[0].contains(getdatafromXml("Field1"))) && (temp[1].contains(getdatafromXml("Field2"))) &&

 

                                                                                (temp[2].contains(getdatafromXml("Field3"))) && (temp[3].contains(getdatafromXml("Field4"))) &&

 

                                                                                (temp[4].contains(getdatafromXml("Field5"))) && (temp[5].contains(getdatafromXml("Field6"))) &&

 

                                                                                (temp[6].contains(getdatafromXml("Field7"))) && (temp[7].contains(getdatafromXml("Field8"))) &&

 

                                                                                (temp[8].contains(getdatafromXml("Field9"))) && (temp[9].contains(getdatafromXml("Field10"))) &&

 

                                                                                (temp[10].contains(getdatafromXml("Field11"))) && (temp[11].contains(getdatafromXml("Field12"))) &&

 

                                                                                (temp[12].contains(getdatafromXml("Field13"))) && (temp[13].contains(getdatafromXml("Field14"))) &&

 

                                                                                (temp[14].contains(getdatafromXml("Field15")))) {

                                                                logReport(true, getResourceDatafromXml("Columns_Headers") + getResourceDatafromXml("Verify"), true);

                                                                testStepMessage(getResourceDatafromXml("Columns_Headers") + getResourceDatafromXml("Verify"));

 

                                                }

 

                                                // Correct Count of Added/Dropped Student And Instructor Column

                                                String Head08 = (String) myList.get(9);

                                                testStepMessage(Head08);

 

                                                if (Head08 != null) {

                                                                String Head09 = (String) myList.get(10);

                                                                testStepMessage(Head09);

 

                                                                if (temp[4] != null && (temp[5] != null)) // temp4- Students;

                                                                                                                                                                                                                                                // temp5-Instructor

                                                                {

                                                                                testStepMessage(getResourceDatafromXml("Columns_Data"));

                                                                }

 

                                                                else {

                                                                                testStepMessage(getResourceDatafromXml("Columns_NoData"));

                                                                }

 

                                                }

 

                                                fr.close();

 

                                } // try end

                                catch (IOException ioex) {

                                                System.out.print(ioex);

                                }

                }

 

                /***********************************

                *

                 * @purpose: countCSV rows and Read particular CSVColumn using column index

                * @author : Karthik Kumar

                * @return : Void

                * @throws IOException

                *

                 ***********************************/

                public void readParticularCSVColumn() throws IOException {

                                BufferedReader bufferedReader = new BufferedReader(new FileReader("C:\\Users\\"

                                                                + System.getProperty("user.name") + "\\Downloads\\All Stores_All Terms_CSMMaterialReport.csv"));

                                String input;

                                int count = 0;

                                while ((input = bufferedReader.readLine()) != null) {

                                                count++;

                                                // System.out.println("***************:>>"+input);

                                }

 

                                finalcount = count - 2;

                                System.out.println("Count *********>>: " + finalcount);

                                bufferedReader.close();

 

                                try {

                                                FileReader fr = null;

                                                BufferedReader br = null;

                                                fr = new FileReader("C:\\Users\\" + System.getProperty("user.name")

                                                                                + "\\Downloads\\All Stores_All Terms_CSMMaterialReport.csv");

                                                br = new BufferedReader(fr);

                                                String line = null;

                                                ArrayList<Object> myList = new ArrayList<Object>();

                                                line = br.readLine();

                                                while (line != null) {

                                                                myList.add(line);

                                                                line = br.readLine();

                                                }

 

                                                for (int d = 1; d <= finalcount; d++) {

                                                                String Body1 = (String) myList.get(d);

                                                                // to get cell Value of csv cell

                                                                // System.out.println("*****"+Body1);

                                                                String[] temp1;// ï»¿

                                                                String rep1 = Body1.replaceAll("[,]+", "\n");

 

                                                                // System.out.println("Rep******"+rep);

 

                                                                temp1 = rep1.split("\n");

 

                                                                for (int i = 0; i < temp1.length; i++) {

                                                                                // System.out.println(temp[i]);

                                                                }

                                                                String NonincluEDSection = temp1[6];

                                                                // System.out.println("DDCS are::>>" + NonincluEDSection );

                                                                if (NonincluEDSection.contains("NonincluEDSection")) {

                                                                                logReport(false, "NonincluED Section data found in CSM Material Report", true);

                                                                                testStepMessage("NonincluED Section data found in CSM Material Report" + NonincluEDSection);

                                                                                break;

                                                                }

 

                                                }

                                                logReport(true, "NonincluED Section data not found in CSM Material Report", true);

                                                testStepMessage("NonincluED Section data not found in CSM Material Report");

 

                                                fr.close();

 

                                } // try end

                                catch (IOException ioex) {

                                                System.out.print(ioex);

                                }

 

                }

 

                /***********************************

                *

                 * @purpose: countCSV rows and Read particular CSVColumn using column index

                * @author : Karthik Kumar

                * @return : Void

                * @throws IOException

                *

                 ***********************************/

                public void readParticularCSVColumnStatus(String Incmpltsec, String Cmpltsec) throws IOException {

                                BufferedReader bufferedReader = new BufferedReader(new FileReader("C:\\Users\\"

                                                                + System.getProperty("user.name") + "\\Downloads\\All Stores_All Terms_CSMMaterialReport.csv"));

                                String input;

                                int count = 0;

                                while ((input = bufferedReader.readLine()) != null) {

                                                count++;

                                                // System.out.println("***************:>>"+input);

                                }

 

                                finalcount = count - 2;

                                System.out.println("Count *********>>: " + finalcount);

                                bufferedReader.close();

 

                                try {

                                                FileReader fr = null;

                                                BufferedReader br = null;

                                                fr = new FileReader("C:\\Users\\" + System.getProperty("user.name")

                                                                                + "\\Downloads\\All Stores_All Terms_CSMMaterialReport.csv");

                                                br = new BufferedReader(fr);

                                                String line = null;

                                                ArrayList<Object> myList = new ArrayList<Object>();

                                                line = br.readLine();

                                                while (line != null) {

                                                                myList.add(line);

                                                                line = br.readLine();

                                                }

                                                boolean CompStatus = false;

                                                boolean InprgStatus = false;

 

                                                // Complete Section and status Verification

                                                for (int d = 1; d <= finalcount; d++) {

                                                                String Body1 = (String) myList.get(d);

                                                                String[] temp1;// ï»¿

                                                                String rep1 = Body1.replaceAll(", ", "\n");

                                                                temp1 = rep1.split(",");

                                                                for (int i = 0; i < temp1.length; i++) {

                                                                                // System.out.println(temp[i]);

 

                                                                                String CompleSecCSV = temp1[6];

                                                                                // System.out.println("CompleSecCSV"+CompleSecCSV);

 

                                                                                String Completestat = temp1[10];

                                                                                // System.out.println("Completestat"+Completestat);

 

                                                                                if ((CompleSecCSV.equals(Cmpltsec)) && (Completestat.equals("Complete"))) {

                                                                                                CompStatus = true;

                                                                                                break;

                                                                                }

                                                                }

 

                                                }

                                                Load();

 

                                                // Incomplete section and status Verification

                                                for (int e = 1; e <= finalcount; e++) {

                                                                // System.out.println("2nd loop");

                                                                String Body2 = (String) myList.get(e);

                                                                String[] temp2;// ï»¿

                                                                String rep2 = Body2.replaceAll(", ", "\n");

                                                                temp2 = rep2.split(",");

                                                                for (int i = 0; i < temp2.length; i++) {

                                                                                // System.out.println(temp2[i]);

 

                                                                                String InCompleSecCSV = temp2[6];

 

                                                                                String InCompletestat = temp2[10];

                                                                                if (InCompleSecCSV.equals(Incmpltsec) && (InCompletestat.equals("In Progress"))) {

                                                                                                InprgStatus = true;

                                                                                                break;

                                                                                }

 

                                                                }

 

                                                }

 

                                                System.out.println("InprgStatus" + InprgStatus + "CompStatus" + CompStatus);

                                                if ((InprgStatus) && (CompStatus)) {

                                                                logReport(true, getResourceDatafromXml("Pass") + getResourceDatafromXml("VrfyIncmpltestat") + Incmpltsec

                                                                                                + getResourceDatafromXml("VrfyCmpltstat") + Cmpltsec + "in CSM Material report", true);

                                                                System.out.println(getResourceDatafromXml("Pass") + getResourceDatafromXml("VrfyIncmpltestat")

                                                                                                + Incmpltsec + getResourceDatafromXml("VrfyCmpltstat") + Cmpltsec + "in CSM Material report");

 

                                                } else {

                                                                logReport(false,

                                                                                                getResourceDatafromXml("Fail") + getResourceDatafromXml("notVrfyIncmpltestat") + Incmpltsec

                                                                                                                                + getResourceDatafromXml("notVrfyCmpltstat") + Cmpltsec + "in CSM Material report",

                                                                                                true);

                                                                System.out.println(

                                                                                                getResourceDatafromXml("Fail") + getResourceDatafromXml("notVrfyIncmpltestat") + Incmpltsec

                                                                                                                                + getResourceDatafromXml("notVrfyCmpltstat") + Cmpltsec + "in CSM Material report");

                                                }

 

                                                fr.close();

 

                                } // try end

                                catch (IOException ioex) {

                                                System.out.print(ioex);

                                }

 

                }

 

                /***********************************

                *

                 * @purpose: countCSV rows and Read particular CSVColumn

                * @author : Karthik Kumar

                * @return : Void

                * @throws IOException

                *

                 ***********************************/

                public void readParticularCSVColumnRequirement() throws IOException {

                                BufferedReader bufferedReader = new BufferedReader(new FileReader("C:\\Users\\"

                                                                + System.getProperty("user.name") + "\\Downloads\\All Stores_All Terms_CSMMaterialReport.csv"));

                                String input;

                                int count = 0;

                                while ((input = bufferedReader.readLine()) != null) {

                                                count++;

                                                // System.out.println("***************:>>"+input);

                                }

 

                                finalcount = count - 2;

                                testStepMessage("Total Number of Rows::>> " + finalcount);

                                // System.out.println("Count *********>>: "+finalcount);

                                bufferedReader.close();

 

                                try {

                                                FileReader fr = null;

                                                BufferedReader br = null;

                                                fr = new FileReader("C:\\Users\\" + System.getProperty("user.name")

                                                                                + "\\Downloads\\All Stores_All Terms_CSMMaterialReport.csv");

                                                br = new BufferedReader(fr);

                                                String line = null;

                                                ArrayList<Object> myList = new ArrayList<Object>();

                                                line = br.readLine();

                                                while (line != null) {

                                                                myList.add(line);

                                                                line = br.readLine();

                                                }

                                                boolean RequirementIND;

 

                                                for (int d = 1; d <= finalcount; d++) {

                                                                String Body1 = (String) myList.get(d);

                                                                // System.out.println("Body1"+Body1);

                                                                String[] temp1;// ï»¿

                                                                String rep1 = Body1.replaceAll(", ", "\n");

                                                                temp1 = rep1.split(",");

                                                                for (int i = 0; i < temp1.length; i++) {

                                                                                // System.out.println(temp1[0]);

 

                                                                }

                                                                if (temp1[11] != null)

 

                                                                {

                                                                                RequirementIND = true;

                                                                } else {

                                                                                RequirementIND = false;

                                                                }

 

                                                                // System.out.println("Adoption Status is::>> "+temp1[10]+" ||

                                                                // "+"Requirement IND is ::>> "+temp1[11]);

 

                                                }

                                                if (RequirementIND = true) {

                                                                test.log(LogStatus.PASS, "Verified that value populated under the Requirement IND column.");

                                                                logReport(true, "Verified that value populated under the Requirement IND column.", true);

                                                                testStepMessage("Verified that value populated under the Requirement IND column.");

                                                } else {

                                                                test.log(LogStatus.FAIL, "Verified that no value populated under the Requirement IND column.");

                                                                logReport(false, "Verified that no value populated under the Requirement IND column.", true);

                                                                testStepMessage("Verified that no value populated under the Requirement IND column.");

                                                }

 

                                                fr.close();

 

                                } // try end

                                catch (IOException ioex) {

                                                System.out.print(ioex);

                                }

 

                }

 

                /***********************************

                *

                 * @purpose: UnfulfillOrders Columns & Data verification

                * 
               

                * @return : Void

                *

                 ***********************************/

 

                public void VerifyCSMReportCSVFileHeaderColumns() {

 

                                try {

                                                FileReader fr = null;

                                                BufferedReader br = null;

                                                // String inputPath =

                                                // JOptionPane.showInputDialog("C:\\Users\\vkakarala\\Downloads\\9947_0765-Term1_06-07-2016_TrueUp.csv");

                                                fr = new FileReader("C:\\Users\\" + System.getProperty("user.name")

                                                                                + "\\Downloads\\All Stores_All Terms_CSMMaterialReport.csv");

                                                br = new BufferedReader(fr);

                                                String line = null;

                                                ArrayList<Object> myList = new ArrayList<Object>();

                                                line = br.readLine();

                                                while (line != null) {

                                                                myList.add(line);

                                                                line = br.readLine();

                                                }

                                                String Head = (String) myList.get(0);

                                                System.out.println(Head);

                                                String[] temp;// ï»¿

                                                String HeaderColumn = Head.replaceAll("[ï»¿]+", "");

                                                String rep = HeaderColumn.replaceAll("[,]+", "\n");

 

                                                System.out.println("Rep******" + rep);

 

                                                temp = rep.split("\n");

 

                                                for (int i = 0; i < temp.length; i++) {

                                                                // System.out.println(temp[i]);

                                                }

 

                                                if ((temp[0].contains("Store #")) && (temp[1].contains("Store Name")) && (temp[2].contains("Parent Term"))

                                                                                && (temp[3].contains("Nested Term")) && (temp[4].contains("Term Start Date"))

                                                                                && (temp[5].contains("Course Name")) && (temp[6].contains("DDCS"))

                                                                                && (temp[7].contains("Section Key")) && (temp[8].contains("LMS Course ID"))

                                                                                && (temp[9].contains("Instructor Name")) && (temp[10].contains("Adoption Status"))

                                                                                && (temp[11].contains("Requirement IND")) && (temp[12].contains("Publisher"))

                                                                                && (temp[13].contains("Download Provider"))

                                                                                && (temp[14].contains("IncludED New Only Fulfillment Flag"))

                                                                                && (temp[15].contains("IncludED Override Rental Flag"))

                                                                                && (temp[16].contains("IncludED Material Flag")) && (temp[17].contains("Continuation Course Flag"))

                                                                                && (temp[18].contains("Continuation Period In Days")) && (temp[19].contains("Author Name"))

                                                                                && (temp[20].contains("Edition")) && (temp[21].contains("Copyright Year"))

                                                                                && (temp[22].contains("Book Type IND")) && (temp[23].contains("ISBN"))

                                                                                && (temp[24].contains("Item Type")) && (temp[25].contains("Item Description"))

                                                                                && (temp[26].contains("Retail New Price")) && (temp[27].contains("Retail Used Price"))

                                                                                && (temp[28].contains("Rental New Fee")) && (temp[29].contains("Rental Used Fee"))

                                                                                && (temp[30].contains("Rental New Flag")) && (temp[31].contains("Rental Used Flag"))

                                                                                && (temp[32].contains("Rental Pricing Factor")) && (temp[33].contains("Actual Enrollment"))

                                                                                && (temp[34].contains("Current Enrollment")) && (temp[35].contains("Estimated Enrollment"))

                                                                                && (temp[36].contains("QTC")) && (temp[37].contains("Adoption Source IND"))) {

                                                                testStepMessage(" Verified that all columns displays correct data in the CSM Material report.");

                                                                logReport(true, "Verified that all columns displays correct data in the CSM Material report.", true);

                                                                test.log(LogStatus.PASS, "Verified that all columns displays correct data in the CSM Material report.");

                                                }

 

                                                fr.close();

 

                                } // try end

                                catch (IOException ioex) {

                                                System.out.print(ioex);

                                }

                }

 

                /***********************************

                *

                 * @purpose: countCSV rows and Read particular CSVColumn

                * @author : Karthik Kumar

                * @return : Void

                * @throws IOException

                *

                 ***********************************/

                public void readParticularCSVColumnBookType() throws IOException {

                                BufferedReader bufferedReader = new BufferedReader(new FileReader("C:\\Users\\"

                                                                + System.getProperty("user.name") + "\\Downloads\\All Stores_All Terms_CSMMaterialReport.csv"));

                                String input;

                                int count = 0;

                                while ((input = bufferedReader.readLine()) != null) {

                                                count++;

                                                // System.out.println("***************:>>"+input);

                                }

 

                                finalcount = count - 2;

                                testStepMessage("Total Number of Rows::>> " + finalcount);

                                System.out.println("Count *********>>: " + finalcount);

                                bufferedReader.close();

 

                                try {

                                                FileReader fr = null;

                                                BufferedReader br = null;

                                                fr = new FileReader("C:\\Users\\" + System.getProperty("user.name")

                                                                                + "\\Downloads\\All Stores_All Terms_CSMMaterialReport.csv");

                                                br = new BufferedReader(fr);

                                                String line = null;

                                                ArrayList<Object> myList = new ArrayList<Object>();

                                                line = br.readLine();

                                                while (line != null) {

                                                                myList.add(line);

                                                                line = br.readLine();

                                                }

                                                boolean BookTypeCEB;

                                                boolean BookTypeTXT;

                                                boolean BookTypeNULL;

 

                                                for (int d = 1; d <= finalcount; d++) {

                                                                String Body1 = (String) myList.get(d);

                                                                // System.out.println("Body1"+Body1);

                                                                String[] temp1;// ï»¿

                                                                String rep1 = Body1.replaceAll(", ", "\n");

                                                                temp1 = rep1.split(",");

                                                                for (int i = 0; i < temp1.length; i++) {

                                                                                // System.out.println(temp1[22]);

 

                                                                }

                                                                if (temp1[22].contains("CEB")) {

                                                                                System.out.println("Body1" + Body1);

                                                                                System.out.println(" CEB Found");

                                                                                BookTypeCEB = true;

                                                                                break;

                                                                }

 

                                                }

                                                Load();

                                                for (int d = 1; d <= finalcount; d++) {

                                                                String Body1 = (String) myList.get(d);

                                                                // System.out.println("Body1"+Body1);

                                                                String[] temp1;// ï»¿

                                                                String rep1 = Body1.replaceAll(", ", "\n");

                                                                temp1 = rep1.split(",");

                                                                for (int i = 0; i < temp1.length; i++) {

                                                                                // System.out.println(temp1[22]);

 

                                                                }

                                                                if (temp1[22].contains("TXT")) {

                                                                                System.out.println("Body1" + Body1);

                                                                                System.out.println(" TXT Found");

                                                                                BookTypeTXT = true;

                                                                                break;

                                                                }

 

                                                }

                                                Load();

                                                for (int d = 1; d <= finalcount; d++) {

                                                                String Body1 = (String) myList.get(d);

                                                                // System.out.println("Body1"+Body1);

                                                                String[] temp1;// ï»¿

                                                                String rep1 = Body1.replaceAll(", ", "\n");

                                                                temp1 = rep1.split(",");

                                                                for (int i = 0; i < temp1.length; i++) {

                                                                                // System.out.println(temp1[22]);

 

                                                                }

                                                                if (temp1[22].equals("")) {

                                                                                System.out.println("Body1" + Body1);

                                                                                System.out.println(" Supply Found");

                                                                                if (temp1[24].contains("Supply"))

                                                                                                BookTypeNULL = true;

                                                                                break;

                                                                }

 

                                                }

                                                if (BookTypeCEB = true) {

 

                                                                test.log(LogStatus.PASS, getResourceDatafromXml("VerifyBookTypeCEB"));

                                                                logReport(true, getResourceDatafromXml("VerifyBookTypeCEB"), true);

                                                                testStepMessage(getResourceDatafromXml("VerifyBookTypeCEB"));

                                                } else {

                                                                test.log(LogStatus.FAIL, getResourceDatafromXml("VerifyBookTypeNoCEB"));

                                                                logReport(false, getResourceDatafromXml("VerifyBookTypeNoCEB"), true);

                                                                testStepMessage(getResourceDatafromXml("VerifyBookTypeNoCEB"));

                                                }

 

                                                if (BookTypeTXT = true) {

                                                                test.log(LogStatus.PASS, getResourceDatafromXml("VerifyBookTypeTXT"));

                                                                logReport(true, getResourceDatafromXml("VerifyBookTypeTXT"), true);

                                                                testStepMessage(getResourceDatafromXml("VerifyBookTypeTXT"));

                                                } else {

                                                                test.log(LogStatus.FAIL, getResourceDatafromXml("VerifyBookTypeNoTXT"));

                                                                logReport(false, getResourceDatafromXml("VerifyBookTypeNoTXT"), true);

                                                                testStepMessage(getResourceDatafromXml("VerifyBookTypeNoTXT"));

                                                }

 

                                                if (BookTypeNULL = true) {

                                                                test.log(LogStatus.PASS, getResourceDatafromXml("VerifyBookTypeEmty"));

                                                                logReport(true, getResourceDatafromXml("VerifyBookTypeEmty"), true);

                                                                testStepMessage(getResourceDatafromXml("VerifyBookTypeEmty"));

                                                } else {

                                                                test.log(LogStatus.FAIL, getResourceDatafromXml("VerifyBookTypeNotEmty"));

                                                                logReport(false, getResourceDatafromXml("VerifyBookTypeNotEmty"), true);

                                                                testStepMessage(getResourceDatafromXml("VerifyBookTypeNotEmty"));

                                                }

 

                                                fr.close();

 

                                } // try end

                                catch (IOException ioex) {

                                                System.out.print(ioex);

                                }

 

                }

}
